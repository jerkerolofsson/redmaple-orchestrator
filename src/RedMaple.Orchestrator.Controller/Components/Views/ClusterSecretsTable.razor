@using RedMaple.Orchestrator.Contracts.Secrets
@using RedMaple.Orchestrator.Controller.Domain.Cluster
@inject ISecretsManager secretsManager
@inject NavigationManager navigationManager
@inject ILogger<ClusterSecretsTable> logger

<ProgressView Visible="_loading" @ref="_progress" />
@if (_error is not null)
{
    <MudAlert Severity="Severity.Error">@_error</MudAlert>
}
else if (!_loading)
{
    <MudDataGrid Bordered="true" Dense="true" Hover="true" EditMode="DataGridEditMode.Cell" T="Secret" RowClick="e => OnRowClicked(e.Item)" Items="@_filteredSecrets" SortMode="SortMode.Multiple">

        <ToolBarContent>
            <MudStack Row="true" AlignItems="AlignItems.Center" Style="width: 100%">
                <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="async () => await AddAsync()" />
                <MudText Typo="Typo.h6">@Title</MudText>
                <MudSpacer />
                <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </MudStack>
        </ToolBarContent>

        <Columns>
            <PropertyColumn Property="x => x.Slug" Title="Slug" />
            <PropertyColumn Property="x => x.Name" Title="Name" />
        </Columns>
    </MudDataGrid>
}
@code {
    private ProgressView _progress = null!;

    private List<Secret> _secrets = new();
    private List<Secret> _filteredSecrets = new();
    private bool _loading = false;
    private string? _error = null;
    private string? _searchString;

    [Parameter] public string? Title { get; set; }
    [Parameter] public EventCallback AddClicked { get; set; }

    private async Task AddAsync()
    {
        await AddClicked.InvokeAsync();
    }

    private void OnRowClicked(Secret secret)
    {
        navigationManager.NavigateTo($"/secrets/secret/{secret.Id}", true);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        logger.LogInformation("Loading secrets..");
        var secrets = (await secretsManager.GetSecretsAsync()).OrderBy(x => x.Name).AsEnumerable();
        _secrets = secrets.ToList();
        _filteredSecrets = _secrets;
        if(_searchString is not null)
        {
            await OnSearch(_searchString);
        }
        logger.LogInformation("Loading secrets..done");
    }

    private Task OnSearch(string text)
    {
        _searchString = text;
        _filteredSecrets = _secrets.Where(x => x.Name.Contains(_searchString, StringComparison.InvariantCultureIgnoreCase)).OrderBy(x => x.Name).ToList();
        return Task.CompletedTask;
    }
}
