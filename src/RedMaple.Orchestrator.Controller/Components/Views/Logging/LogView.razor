@inject IJSRuntime _js

<div class="container" id="@_linesId">
    <div class="lines">
        @foreach (var line in _lines)
        {
            @(new MarkupString(line))
        }
    </div>
</div>

@code {

    private string _linesId = "invalid";
    private IJSObjectReference? _module;

    private LinkedList<string> _lines = new LinkedList<string>();

    /// <summary>
    /// Parses ANSI escape codes if true
    /// </summary>
    [Parameter] public bool ParseAnsiEscapeCodes { get; set; } = true;

    /// <summary>
    /// Parses log levels and colorizes it
    /// </summary>
    [Parameter] public bool ParseLogLevels { get; set; } = true;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await _js.InvokeVoidAsync("initializeContinuousScroll", _linesId);
        }
    }

    protected override void OnInitialized()
    {
        _linesId = "dt" + Guid.NewGuid().ToString();
        base.OnInitialized();
    }

    public void AddLine(string line)
    {
        if (ParseAnsiEscapeCodes)
        {
            line = AnsiToHtml(line) + "<br/>";
        }
        if (ParseLogLevels)
        {
            line = ColorizeLogLevels(line);
        }

        InvokeAsync(() =>
        {
            if (_lines.Count > 4000)
            {
                _lines.RemoveFirst();
            }
            _lines.AddLast(line);

            this.StateHasChanged();
        });
    }
}
