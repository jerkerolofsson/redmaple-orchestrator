@using MudBlazor
@using RedMaple.Orchestrator.DockerCompose.Models

@if(Service is not null)
{
    <MudStack Spacing="2" Style="width: 60ch">

        <Setting Title="Image">
            <MudTextField Value="@Service.image" T="string" ValueChanged="async (s) => await UpdateImageAsync(s)" />
        </Setting>

        <Setting Title="Restart">
            <MudTextField Value="@Service.restart" T="string" ValueChanged="async (s) => await UpdateRestartAsync(s)" />
        </Setting>

@*         @if (Service.dns is not null && Service.dns.Count > 0)
        {
            for (int i = 0; i < Service.dns.Count; i++)
            {
                int index = i;
                string label = $"DNS{(i + 1)}";
                <Setting Title="@label">
                    <MudTextField Value="@Service.dns[i]" T="string" ValueChanged="async (s) => await UpdateDnsAsync(index, s)" />
                </Setting>
                
            }
        }
 *@
    </MudStack>
}

@code {
    [Parameter] public DockerComposeService? Service { get; set; } = null!;
    [Parameter] public EventCallback<DockerComposeService> ServiceChanged { get; set; }

    private async Task UpdateDnsAsync(int index, string value)
    {
        if (Service?.dns is not null)
        {
            Service.dns[index] = value;
            await ServiceChanged.InvokeAsync(Service);
        }
    }
    private async Task UpdateImageAsync(string value)
    {
        if (Service is not null)
        {
            Service.image = value;
            await ServiceChanged.InvokeAsync(Service);
        }
    }
    private async Task UpdateRestartAsync(string value)
    {
        if (Service is not null)
        {
            Service.restart = value;
            await ServiceChanged.InvokeAsync(Service);
        }
    }
}
