@if (_vm is not null)
{
    <MudDataGrid Bordered="true" Dense="true"
    ReadOnly="false"
    EditMode="DataGridEditMode.Cell"
    Items="@_vm.Variables"
    SortMode="SortMode.Multiple">
        <Columns>
            <PropertyColumn Property="x => x.Key" Title="Name" />
            <PropertyColumn Property="x => x.Value" Title="Value" />

            <TemplateColumn StickyRight="true">
                <EditTemplate>
                    <MudButton OnClick="async() => RemoveItem(context.Item.Key)">Delete</MudButton>
                </EditTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>

    <MudCardActions>
        <MudButton OnClick="@AddItem" Color="Color.Primary" Class="add-item-btn">Add Item</MudButton>
    </MudCardActions>
}

@code {
    [Parameter] public Dictionary<string, string?> EnvironmentVariables { get; set; } = new();

    private EnvironmentVariableViewModel? _vm;

    protected override void OnParametersSet()
    {
        _vm = new EnvironmentVariableViewModel(EnvironmentVariables);
    }

    void AddItem()
    {
        string name = "ENVIRONMENT_VARIABLE";
        int count = 1;
        while(EnvironmentVariables.ContainsKey(name))
        {
            name = name + "_" + count;
            count++;
        }

        _vm?.Add(name, "VALUE");
        this.StateHasChanged();
    }
    void RemoveItem(string key)
    {
        _vm?.Remove(key);
        this.StateHasChanged();
    }
}
