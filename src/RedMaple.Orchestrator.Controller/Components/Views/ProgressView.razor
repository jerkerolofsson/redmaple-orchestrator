@using Docker.DotNet.Models
@using Humanizer
@implements IProgress<string>
@implements IProgress<JSONMessage>
@if (Visible)
{
    <MudCard Elevation="5" Class="pa-5">
        <div class="current">
            <MudProgressCircular Size="Size.Small" Color="Color.Secondary" Indeterminate="true" />
            <div style="font-weight: bold">
                @_message?.Text
            </div>
        </div>

        @if (_jsonMessage is not null && _jsonMessage.Progress is not null)
        {
            <div>@_jsonMessage.Status</div>
            <div>@_jsonMessage.ProgressMessage</div>
            @if(_jsonMessage.Progress is not null)
            {
                <MudProgressLinear Value="@_jsonMessage.Progress.Current" Max="@_jsonMessage.Progress.Total" Color="Color.Secondary" />
                <div>@_jsonMessage.Progress.Units</div>
            }
        }

        @if(_completed.Count > 0)
        {
            <div style="display: grid; grid-template-columns: auto 1fr auto; width: 100%; grid-row-gap: 2px; grid-column-gap: 5px; font-size: 8pt">
                <div></div>
                <div style="font-weight: bold">Message</div>
                <div style="font-weight: bold">Elapsed</div>
                @foreach (var line in _completed)
                {
                    <div style="color: yellowgreen; font-weight: bold; font-size: 12pt; padding: 5px;">✓</div>
                    <div style="display: flex; align-items: center">@line.Text</div>
                    <div style="display: flex; align-items: center; color: #999">@line.Elapsed</div>
                }
            </div>
        }
    </MudCard>
}
@code {
    private HistoryItem? _message = null;
    private List<HistoryItem> _completed = new();

    private class HistoryItem
    {
        public required string Text {get;set;}
        public DateTime Started { get; set; } = DateTime.Now;
        public DateTime Completed { get; set; }

        public string Elapsed
        {
            get
            {
                var elapsed = Completed - Started;
                return elapsed.Humanize();
            }
        }
    }

    private JSONMessage? _jsonMessage = null;

    [Parameter]
    public bool Visible { get; set; }

    public void Begin()
    {
        _message = null;
        _jsonMessage = null;
        _completed.Clear();
        this.StateHasChanged();
    }

    public void Report(JSONMessage message)
    {
        /*
        if(_message is not null && _message.Text != message.ProgressMessage && !string.IsNullOrEmpty(message.ProgressMessage))
        {
            Report(message.ProgressMessage);
        }
        */

        InvokeAsync(() =>
        {
            _jsonMessage = message;
            this.StateHasChanged();
        });
    }
    public void Report(string message)
    {
        if(string.IsNullOrWhiteSpace(message))
        {
            return;
        }

        var item = new HistoryItem
            {
                Text = message
            };
        InvokeAsync(() =>
        {
            if (_message is not null)
            {
                _message.Completed = DateTime.Now;
                _completed.Add(_message);
            }
            _message = item;
            this.StateHasChanged();
        });
    }

}
