@using MudBlazor
@using MudExtensions
@inject INodeManager nodeManager

<MudSelectExtended  T="NodeInfo"
Class="@Class"
ItemCollection="_nodes"
Label="@Label" HelperText="" Value="@Value" ValueChanged="OnValueChanged">

    <ItemTemplate>
        <MudStack Class="mud-width-full" Justify="Justify.SpaceBetween">
            <MudText><b>@context.Value?.Name</b></MudText>
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <MudStack Row="true">
                    <MudIcon Icon="@Icons.Material.Outlined.Computer" />
                    <MudText>@(context.Value?.IpAddress)</MudText>
                </MudStack>
                @if (!string.IsNullOrEmpty(context.Value?.Region))
                {
                    <MudStack Row="true">
                        <MudIcon Icon="@Icons.Material.Outlined.Map" />
                        <MudText>@(context.Value?.Region)</MudText>
                    </MudStack>
                }
                <MudChipSet T="string">
                    @if (context.Value?.Tags is not null)
                    {
                        foreach (var tag in context.Value.Tags)
                        {
                            <MudChip>@tag</MudChip>
                        }
                    }
                </MudChipSet>
            </MudStack>
        </MudStack>
    </ItemTemplate>
</MudSelectExtended>

@code {
    [Parameter]
    public bool MustBeLoadBalancer { get; set; } = false;

    [Parameter]
    public bool MustBeApplicationHost { get; set; } = false;

    [Parameter]
    public bool MustBeIngress { get; set; } = false;

    [Parameter]
    public bool MustBeDns { get; set; } = false;

    [Parameter]
    public string Label { get; set; } = "Node";

    [Parameter]
    public NodeInfo Value { get; set; } = null!;

    [Parameter] public string Class { get; set; } = "";

    [Parameter] public string? Region { get; set; } = null;

    [Parameter]
    public EventCallback<NodeInfo?> ValueChanged { get; set; }

    private List<NodeInfo> _nodes = [];

    private async Task OnValueChanged(NodeInfo node)
    {
        await this.ValueChanged.InvokeAsync(node);
    }

    protected async override Task OnParametersSetAsync()
    {
        IEnumerable<NodeInfo> nodes = await nodeManager.GetNodesAsync();
        if (MustBeDns)
        {
            nodes = nodes.Where(x => x.IsDnsEnabled);
        }
        if (MustBeIngress)
        {
            nodes = nodes.Where(x => x.IsIngressEnabled);
        }
        if (MustBeApplicationHost)
        {
            nodes = nodes.Where(x => x.IsApplicationHostEnabled);
        }
        if (MustBeLoadBalancer)
        {
            nodes = nodes.Where(x => x.IsLoadBalancerEnabled);
        }
        if (Region is not null)
        {
            nodes = nodes.Where(x => x.Region == Region);
        }

        _nodes = nodes.ToList();

        if(Value is null && _nodes.Count > 0)
        {
            await ValueChanged.InvokeAsync(_nodes.First());
        }
    }

}