@using MudBlazor
@inject INodeManager nodeManager

    <MudSelect T="NodeInfo" Label="@Label" HelperText="Select node" Value="@Value" ValueChanged="OnValueChanged">
        @foreach (var part in _nodes)
        {
            <MudSelectItem T="NodeInfo" Value=@part>@part.IpAddress</MudSelectItem>

        }
    </MudSelect>

@code {
    [Parameter]
    public bool MustBeLoadBalancer { get; set; } = false;

    [Parameter]
    public bool MustBeApplicationHost { get; set; } = false;

    [Parameter]
    public bool MustBeIngress { get; set; } = false;

    [Parameter]
    public bool MustBeDns { get; set; } = false;

    [Parameter]
    public string Label { get; set; } = "Node";

    [Parameter]
    public NodeInfo Value { get; set; } = null!;

    [Parameter]
    public EventCallback<NodeInfo?> ValueChanged { get; set; }

    private List<NodeInfo> _nodes = [];

    private async Task OnValueChanged(NodeInfo node)
    {
        await this.ValueChanged.InvokeAsync(node);
    }

    protected async override Task OnParametersSetAsync()
    {
        IEnumerable<NodeInfo> nodes = await nodeManager.GetNodesAsync();
        if (MustBeDns)
        {
            nodes = nodes.Where(x => x.IsDnsEnabled);
        }
        if (MustBeIngress)
        {
            nodes = nodes.Where(x => x.IsIngressEnabled);
        }
        if (MustBeApplicationHost)
        {
            nodes = nodes.Where(x => x.IsApplicationHostEnabled);
        }
        if (MustBeLoadBalancer)
        {
            nodes = nodes.Where(x => x.IsLoadBalancerEnabled);
        }
        _nodes = nodes.ToList();

        if(Value is null && _nodes.Count > 0)
        {
            await ValueChanged.InvokeAsync(_nodes.First());
        }
    }

}