@inject IClusterResourceManager resourceManager

<ProgressView Visible="_loading" @ref="_progress" />
@if (_error is not null)
{
    <MudAlert Severity="Severity.Error">@_error</MudAlert>
}
else if (!_loading)
{
    <MudStack Row="true" Class="mt-2 mb-1" AlignItems="AlignItems.Center">
        <MudSpacer />
        <SelectRegion Region="@_region" RegionChanged="OnRegionChangedAsync" Regions="@_regions" />
    </MudStack>
    <MudDataGrid Bordered="true" Dense="true" Hover="true"
    EditMode="DataGridEditMode.Cell"
    Items="@_filteredResources"
    SortMode="SortMode.Multiple">

        <ToolBarContent>
            <MudStack Row="true" AlignItems="AlignItems.Center" Style="width: 100%">
                <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="async () => await AddAsync()" />
                <MudText Typo="Typo.h6">@Title</MudText>
                <MudSpacer />
                <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </MudStack>
        </ToolBarContent>

        <Columns>
            <TemplateColumn Title="Region" HeaderStyle="width: 10px">
                <HeaderTemplate>
                    <i class="fa fa-globe"/>
                </HeaderTemplate>
                <CellTemplate>
                    @if (!string.IsNullOrEmpty(context.Item.ResourceRegion))
                    {
                        <MudChip Color="Color.Secondary" Variant="Variant.Outlined" Size="Size.Small">@context.Item.ResourceRegion</MudChip>
                    }
                </CellTemplate>
            </TemplateColumn>

            <TemplateColumn Title="Name">

                <CellTemplate>
                    @{
                        var url = $"/resources/resource/{context.Item.Id}";
                        var icon = "/resource-icons/resource.png";
                        if (context.Item.Kind == ResourceKind.ConnectionString)
                        {
                            icon = "/resource-icons/database.png";
                        }
                        if (context.Item.Kind == ResourceKind.LargeLanguageModel)
                        {
                            icon = "/resource-icons/ai.png";
                        }
                        if (context.Item.Kind == ResourceKind.OidcServer)
                        {
                            icon = "/resource-icons/oidc.png";
                        }
                        if (context.Item.Kind == ResourceKind.API)
                        {
                            icon = "/resource-icons/api.png";
                        }
                        if (context.Item.Kind == ResourceKind.Volume)
                        {
                            icon = "/resource-icons/volume.png";
                        }
                        if (context.Item.IconUrl is not null)
                        {
                            icon = context.Item.IconUrl;
                        }

                    }
                    <a href="@url">
                        <div style="display: flex; align-items: center">
                            <img src="@icon" class="icon" alt="@context.Item.Kind.ToString()" />
                            <div>@context.Item.Name</div>
                        </div>
                    </a>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.Kind" Title="Kind" />
        </Columns>
    </MudDataGrid>
}
@code {
    private ProgressView _progress = null!;

    private List<ClusterResource> _resources = new();
    private List<ClusterResource> _filteredResources = new();
    private bool _loading = false;
    private string? _error = null;
    private string[]? _regions = null;
    private string? _region = null;
    private string? _searchString;

    [Parameter] public string? Title { get; set; }
    [Parameter] public ResourceKind? Kind { get; set; }
    [Parameter] public EventCallback AddClicked { get; set; }

    private async Task AddAsync()
    {
        await AddClicked.InvokeAsync();
    }

    private async Task OnRegionChangedAsync(string? region)
    {
        _region = region;
        await LoadResourcesAsync();
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadResourcesAsync();
    }

    private async Task LoadResourcesAsync()
    {
        var resources = (await resourceManager.GetClusterResourcesAsync()).OrderBy(x => x.Name).AsEnumerable();

        if (_regions is null)
        {
            _regions = ["Global", .. resources.Where(x => x.ResourceRegion != null).Select(x => x.ResourceRegion!).OrderBy(x => x).Distinct().ToArray()];
        }

        if (_region is not null)
        {
            resources = resources.Where(x => x.ResourceRegion == _region);
        }
        if(Kind is null)
        {
            _resources = resources.ToList();
        }
        else
        {
            _resources = resources.Where(x=>x.Kind == Kind).ToList();
        }

        _filteredResources = _resources;
        if(_searchString is not null)
        {
            await OnSearch(_searchString);
        }
    }

    private Task OnSearch(string text)
    {
        _searchString = text;
        _filteredResources = _resources.Where(x => x.Name.Contains(_searchString, StringComparison.InvariantCultureIgnoreCase)).OrderBy(x => x.Name).ToList();
        return Task.CompletedTask;
    }
}
