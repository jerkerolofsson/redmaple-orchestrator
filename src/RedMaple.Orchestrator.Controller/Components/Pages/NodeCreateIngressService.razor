@page "/node/{id}/create-ingress"
@rendermode InteractiveServer
@inject IIngressManager _ingressManager
@inject INodeManager _nodeManager
@inject NavigationManager _navigationManager
@using System.ComponentModel.DataAnnotations
@using MudExtensions
@using RedMaple.Orchestrator.Controller.Components.Views
@using RedMaple.Orchestrator.Controller.Domain.Ingress

<MudPopoverProvider />
<ProgressView @ref="_progress"/>

<MudItem xs="12" sm="7">
    <MudPaper Class="pa-5">
        <div class="schematics">
            <img src="cloud-server.png" class="server"/>
            <img src="arrow-right.png" class="arrow" />
            <img src="app-server.png" class="server" />
            <MudText Typo="Typo.subtitle1">Ingress</MudText>
            <MudText Typo="Typo.subtitle1"></MudText>
            <MudText Typo="Typo.subtitle1">Application Service</MudText>

            <MudText Typo="Typo.body1">https://@model.DomainName</MudText>
            <MudText Typo="Typo.body1"></MudText>
            <MudText Typo="Typo.body1">@model.Destination</MudText>
        </div>
    </MudPaper>
</MudItem>

<EditForm Model="@model" OnValidSubmit="async () => await OnValidSubmitAsync()">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard Class="pa-5 mt-5">
                <h1>Create new ingress service</h1>

                <MudCardContent>
                    <MudTextField Label="Domain Name"
                                  @bind-Value="model.DomainName" For="@(() => model.DomainName)" />

                    <MudTextField Label="Destination" Class="mt-5"
                                  HelperText="Destination URL where the app/service is running"
                                  @bind-Value="model.Destination" For="@(() => model.Destination)" />

                </MudCardContent>
                <MudCardActions>
                    <MudLoadingButton 
                        ButtonType="ButtonType.Submit"
                        Variant="Variant.Filled"
                        Color="Color.Primary"
                        @bind-Loading="@_isLoading"
                        LoadingCircularColor="Color.Primary" >
                            <ChildContent>
                                Create
                            </ChildContent>
                            <LoadingContent>
                                Creating..
                            </LoadingContent>
                        </MudLoadingButton>
                </MudCardActions>

                <MudAlert Class="ml-5 mr-5 mb-5" Severity="Severity.Normal">
                    Creating an ingress service will create a DNS entry, setup a reverse proxy and generate https certificates for the service
                </MudAlert>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>


@code {
    CreateIngressServiceModel model = new CreateIngressServiceModel();
    private bool _isLoading = false;

    public class CreateIngressServiceModel
    {
        [Required]
        public string DomainName { get; set; } = "app1.lan";

        [Required]
        public string Destination { get; set; } = "https://192.168.89.122:10000";
    }

    [Parameter] public string Id { get; set; } = null!;

    private ProgressView _progress = null!;

    private async Task OnValidSubmitAsync()
    {
        _isLoading = true;
        this.StateHasChanged();

        var nodes = await _nodeManager.GetNodesAsync();
        var node = nodes.Where(x=>x.Id == Id).FirstOrDefault();
        _progress.Begin();
        if(node?.IpAddress is null)
        {
            throw new Exception("Node not active");
        }

        if (Uri.TryCreate(model.Destination, UriKind.Absolute, out var dest))
        {
            await _ingressManager.AddIngressServiceAsync(new IngressServiceDescription
                {
                    Scheme = dest.Scheme,
                    DestinationIp = dest.Host,
                    DomainName = model.DomainName,
                    DestinationPort = dest.Port,
                    Id = Guid.NewGuid().ToString(),
                    IngressIp = node.IpAddress,
                    IngressPort = node.IngressHttpsPort
                }, _progress);

                _navigationManager.NavigateTo($"/node/{Id}/ingress");
        }
    }
}