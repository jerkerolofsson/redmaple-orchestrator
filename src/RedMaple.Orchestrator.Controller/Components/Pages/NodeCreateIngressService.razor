@page "/node/{id}/create-ingress"
@rendermode InteractiveServer
@inject IIngressManager _ingressManager
@inject INodeManager _nodeManager
@using System.ComponentModel.DataAnnotations

<h1>Create new ingress service</h1>
<MudPopoverProvider />

<EditForm Model="@model" OnValidSubmit="async () => await OnValidSubmitAsync()">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Domain Name"
                                  @bind-Value="model.DomainName" For="@(() => model.DomainName)" />

                    <MudTextField Label="Destination" Class="mt-5"
                                  HelperText="Destination URL where the app/service is running"
                                  @bind-Value="model.Destination" For="@(() => model.Destination)" />

                </MudCardContent>
                <MudCardActions>
                    <MudButton 
                        ButtonType="ButtonType.Submit" 
                        Variant="Variant.Filled" 
                        Color="Color.Primary" >Create</MudButton>
                </MudCardActions>

                <MudAlert Class="ml-5 mr-5 mb-5" Severity="Severity.Normal">
                    Creating an ingress service will create a DNS entry, setup a reverse proxy and generate https certificates for the service
                </MudAlert>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>


@code {
    CreateIngressServiceModel model = new CreateIngressServiceModel();

    public class CreateIngressServiceModel
    {
        [Required]
        public string DomainName { get; set; } = "fortress.home.io";

        [Required]
        public string Destination { get; set; } = "http://192.168.89.122:9088";

    }

    [Parameter] public string Id { get; set; } = null!;

    private async Task OnValidSubmitAsync()
    {
        var nodes = await _nodeManager.GetNodesAsync();
        var node = nodes.Where(x=>x.Id == Id).FirstOrDefault();
        if(node?.IpAddress is null)
        {
            throw new Exception("Node not active");
        }

        if (Uri.TryCreate(model.Destination, UriKind.Absolute, out var dest))
        {
            await _ingressManager.AddIngressServiceAsync(new IngressServiceDescription
                {
                    Scheme = dest.Scheme,
                    DestinationIp = dest.Host,
                    DomainName = model.DomainName,
                    DestinationPort = dest.Port,
                    Id = Guid.NewGuid().ToString(),
                    IngressIp = node.IpAddress,
                    IngressPort = 8443
                });
        }
    }

}