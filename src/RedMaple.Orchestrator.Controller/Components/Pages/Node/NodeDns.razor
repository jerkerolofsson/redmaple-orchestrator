@page "/node/{id}/dns"
@using MudBlazor
@using RedMaple.Orchestrator.Containers
@using RedMaple.Orchestrator.Contracts
@using RedMaple.Orchestrator.Contracts.Containers
@using RedMaple.Orchestrator.Controller.Domain;
@rendermode InteractiveServer
@inject INodeManager nodeManager
@inject NavigationManager navigationManager
<MudPopoverProvider />

@if (_nodeSettings?.EnableDns == false || _nodeInfo is null)
{
    <MudAlert Class="ml-5 mr-5 mb-5" Severity="Severity.Normal">
        DNS is not enabled on this node
    </MudAlert>
}
else
{
    <MudCard Class="pa-5 mt-5">

        <MudText Typo="Typo.h6">Local DNS entries</MudText>
        <MudText Typo="Typo.subtitle2">These DNS entries are only provisioned to @_nodeInfo.IpAddress</MudText>

        <MudDataGrid Bordered="true" Dense="true"
                     ReadOnly="false"
                     EditMode="DataGridEditMode.Cell"
                        Items="@_entries" 
                        SortMode="SortMode.Multiple">
            <Columns>
                <TemplateColumn HeaderStyle="width: 1rem;" StickyLeft="true">
                    <CellTemplate>
                        <img src="app-server.png" class="icon" />
                    </CellTemplate>
                </TemplateColumn>

                <PropertyColumn Property="x => x.Hostname" Title="Name"/>
                <PropertyColumn Property="x => x.IpAddress" Title="IP Address"/>
               
                <TemplateColumn StickyRight="true">
                    <EditTemplate>
                        <MudButton Class="btn-delete" OnClick="async() => RemoveItem(context.Item)">
                            <i class="fa fa-trash"></i>&nbsp;Delete
                        </MudButton>
                    </EditTemplate>
                </TemplateColumn>

            </Columns>
        </MudDataGrid>

        <MudCardActions>

            <MudButton OnClick="@AddItem" Color="Color.Primary" Class="add-item-btn">Add Item</MudButton>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
                       OnClick="@(async () => await SaveTableAsync())">Save</MudButton>
        </MudCardActions>
    </MudCard>

    <MudCard Class="pa-5 mt-5">

        <MudText Typo="Typo.h6">Global DNS entries</MudText>
        <MudText Typo="Typo.subtitle2">These DNS entries are inherited from the controller</MudText>
        <MudDataGrid Bordered="true" Dense="true"
                     ReadOnly="true"
                     Items="@_globalEntries"
                     SortMode="SortMode.Multiple">
            <Columns>
                 <TemplateColumn HeaderStyle="width: 1rem;" StickyLeft="true">
                    <CellTemplate>
                        <img src="app-server.png" class="icon" />
                    </CellTemplate>
                </TemplateColumn>

                <PropertyColumn Property="x => x.Hostname" Title="Name"/>
                <PropertyColumn Property="x => x.IpAddress" Title="IP Address" />

                <TemplateColumn StickyRight="true">
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </MudCard>
}

@code {
    [Parameter] public string Id { get; set; } = null!;

    private NodeInfo? _nodeInfo;
    private RedMaple.Orchestrator.Contracts.Node.NodeSettings? _nodeSettings;
    private List<DnsEntry> _entries = new();
    private List<DnsEntry> _globalEntries = new();

    void AddItem()
    {
        _entries.Add(new DnsEntry { Hostname = "name", IpAddress="192.168.0.202" });
    }

    void RemoveItem(DnsEntry entry)
    {
        _entries.Remove(entry);
    }
    private async Task LoadTableAsync()
    {
        if (_nodeInfo is not null)
        {
            using var client = new NodeDnsClient(_nodeInfo.BaseUrl);
            var dnsEntries = await client.GetDnsEntriesAsync();
            _entries = dnsEntries.Where(x=>!x.IsGlobal).ToList();
            _globalEntries = dnsEntries.Where(x => x.IsGlobal).ToList();
        }

    }
    private async Task SaveTableAsync()
    {
        if (_nodeInfo is not null)
        {
            using var client = new NodeDnsClient(_nodeInfo.BaseUrl);
            await client.SetDnsEntriesAsync([.. _entries, .. _globalEntries]);
        }
    }

    private async Task SaveSettingsAsync()
    {
        if (_nodeInfo is not null && _nodeSettings is not null)
        {
            using var client = new NodeSettingsClient(_nodeInfo.BaseUrl);
            await client.ApplySettingsAsync(_nodeSettings);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var nodes = await nodeManager.GetNodesAsync();
        _nodeInfo = nodes.FirstOrDefault(x => x.Id == Id);

        if (_nodeInfo is not null)
        {
            using var client = new NodeSettingsClient(_nodeInfo.BaseUrl);
            _nodeSettings = await client.GetSettingsAsync();

        }
        await LoadTableAsync();
    }
}