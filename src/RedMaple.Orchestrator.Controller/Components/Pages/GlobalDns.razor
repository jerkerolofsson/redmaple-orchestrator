@page "/dns"
@using MudBlazor
@using RedMaple.Orchestrator.Containers
@using RedMaple.Orchestrator.Contracts
@using RedMaple.Orchestrator.Controller.Domain
@using RedMaple.Orchestrator.Controller.Domain.GlobalDns
@rendermode InteractiveServer
@inject IGlobalDns dns
@inject NavigationManager navigationManager
<MudPopoverProvider />

<MudCard Class="pa-5 mt-5">

    <MudText Typo="Typo.h6">Global DNS entries</MudText>
    @if (_region is null)
    {
        <MudText Typo="Typo.subtitle2">These DNS entries are provisioned to all DNS servers</MudText>
    }
    else
    {
        <MudText Typo="Typo.subtitle2">These DNS entries are provisioned to DNS servers in the @_region region.</MudText>
    }

    <MudStack Row="true" Class="mt-2 mb-1" AlignItems="AlignItems.Center">
        <MudSpacer />
        <SelectRegion Region="@_region" RegionChanged="OnRegionChangedAsync" Regions="@_regions" />
    </MudStack>

    <MudDataGrid Bordered="true" 
    Dense="true"
    ReadOnly="false"
    EditMode="DataGridEditMode.Cell"
    Filterable="true"
    Items="@_entries"
    SortMode="SortMode.Multiple">
        <Columns>
            <TemplateColumn HeaderStyle="width: 1rem;" StickyLeft="true">
                <EditTemplate>
                    <img src="app-server.png" class="icon" />
                </EditTemplate>
            </TemplateColumn>

            <PropertyColumn Property="x => x.Region" Title="Region" Required="false" />
            <PropertyColumn Property="x => x.Hostname" Title="Name" />
            <PropertyColumn Property="x => x.IpAddress" Title="IP Address" />

            <TemplateColumn StickyRight="true">
                <EditTemplate>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="async() => RemoveItem(context.Item)">
                    </MudIconButton>
                </EditTemplate>
            </TemplateColumn>

        </Columns>

        <PagerContent>
            <MudDataGridPager T="DnsEntry" PageSizeOptions=@(new int[] {10, 25, 50}) />
        </PagerContent>

    </MudDataGrid>

    <MudCardActions>

        <MudButton OnClick="@AddItem" Color="Color.Primary" Class="add-item-btn">Add Item</MudButton>

        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
        OnClick="@(async () => await SaveTableAsync())">Save</MudButton>
    </MudCardActions>
</MudCard>

@code {
    [Parameter] public string Id { get; set; } = null!;

    private List<DnsEntry> _entries = new();

    private string[]? _regions = null;
    private string? _region = null;

    private async Task OnRegionChangedAsync(string? region)
    {
        _region = region;
        await LoadTableAsync();
    }

    private void AddItem()
    {
        _entries.Add(new DnsEntry { Hostname = "name", IpAddress = "192.168.0.202" });
    }

    private void RemoveItem(DnsEntry entry)
    {
        _entries.Remove(entry);
    }
    private async Task LoadTableAsync()
    {
        var entries = (await dns.GetDnsEntriesAsync()).Where(x => x.IsGlobal);

        if(_regions is null)
        {
            _regions = ["Global", .. entries.Where(x => x.Region != null).Select(x => x.Region!).OrderBy(x => x).Distinct().ToArray()];
        }

        if(_region is not null)
        {
            entries = entries.Where(x => x.Region == _region);
        }
        _entries = entries.ToList();
    }
    private async Task SaveTableAsync()
    {
        if (_entries.Count > 0)
        {
            await dns.SetDnsEntriesAsync(_entries);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTableAsync();
    }
}