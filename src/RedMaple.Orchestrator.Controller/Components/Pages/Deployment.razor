@page "/deployments/{slug}"
@using Humanizer
@using RedMaple.Orchestrator.Controller.Domain.Aggregations
@using RedMaple.Orchestrator.Controller.Domain.Deployments
@using RedMaple.Orchestrator.Controller.Domain.Metrics.ContainerMetrics
@using RedMaple.Orchestrator.Controller.Domain.Metrics.Models
@using RedMaple.Orchestrator.Controller.ViewModels
@using System.Globalization
@inject IDeploymentManager deploymentManager
@inject IContainerStatsUpdateProvider containerStatsUpdateProvider
@inject ContainerStatsAggregator containerStatsAggregator
@implements IDisposable
@rendermode InteractiveServer

<MudStack Row="true" Style="width: 100%" AlignItems="AlignItems.Center">
    <MudBreadcrumbs Items="_nav"></MudBreadcrumbs>
    <MudSpacer/>
    @if(Slug is not null)
    {
        string editUrl = $"/deployments/{Slug}/edit";
        <MudIconButton Icon="@Icons.Material.Filled.Edit" Href="@editUrl"/>
    }
</MudStack>

<MudItem Class="pa-5">
    <MudStack Spacing="2">

        <MudStack  Spacing="2" Row="true">
            @if (_plan is not null)
            {
                string ingressUrl = "";
                string appUrl = "";

                if (_plan.CreateIngress && !string.IsNullOrEmpty(_plan.DomainName))
                {
                    ingressUrl = $"https://{_plan.DomainName}";
                }
                if (_plan.ApplicationServerIps?.Count > 0)
                {
                    appUrl = $"{_plan.ApplicationProtocol}://{_plan.ApplicationServerIps[0]}:{_plan.ApplicationServerPort}";
                }
                if (!string.IsNullOrEmpty(ingressUrl))
                {
                    <MudNavLink Href="@ingressUrl">@ingressUrl</MudNavLink>
                }
                if (!string.IsNullOrEmpty(appUrl))
                {
                    <MudNavLink Href="@appUrl">@appUrl</MudNavLink>
                }
            }
        </MudStack>

    </MudStack>
</MudItem>


<MudText Typo="Typo.h6">Logs</MudText>
<div class="container-logs">
    @foreach (var deployedContainer in _containers)
    {
        <div>
            <h1>@deployedContainer.Container.Name</h1>
            <ContainerLogView NodeId="@deployedContainer.Node.Id" ContainerId="@deployedContainer.Container.Id" />
        </div>
    }
</div>

<div class="container-charts">
    <MudItem Class="pa-3">
        <MudText Color="Color.Secondary" Typo="Typo.h6">@_cpuHeader</MudText>
        <ContainerStatsChart SeriesName="CPU (%)" Data="@_cpuStats"></ContainerStatsChart>
    </MudItem>

    <MudItem Class="pa-3">
        <MudText Color="Color.Secondary" Typo="Typo.h6">@_memoryHeader</MudText>
        <ContainerStatsChart SeriesName="Memory (MB)" Data="@_memoryUsage"></ContainerStatsChart>
    </MudItem>
</div>


@code {
    [Parameter]
    public string Slug { get; set; } = null!;
    private List<BreadcrumbItem> _nav = new List<BreadcrumbItem>();

    private IReadOnlyList<ContainerStatsAggregation> _containers = new List<ContainerStatsAggregation>();
    private IReadOnlyCollection<DoubleTime> _cpuStats = Array.Empty<DoubleTime>();
    private IReadOnlyCollection<DoubleTime> _memoryUsage = Array.Empty<DoubleTime>();
    private string? _monitorContainerId = null;
    private string _memoryHeader = "Memory Usage";
    private string _cpuHeader = "CPU (%)";
    private DeploymentPlan? _plan;

    protected override async Task OnParametersSetAsync()
    {
        _plan = await deploymentManager.GetDeploymentBySlugAsync(Slug);
        await RefreshStatsAsync();

        // Breadcrumbs
        _nav.Clear();
        _nav.Add(new("Home", "/"));
        _nav.Add(new("Deployments", "/deployments"));
        if (_plan is not null)
        {
            _nav.Add(new(_plan.Name, $"/deployments/{_plan.Slug}"));
        }
    }

    private async Task RefreshStatsAsync()
    {
        _containers = await containerStatsAggregator.GetDeployedContainersAsync(Slug);
        if (_containers.Count > 0)
        {
            var container = _containers[0];
            _monitorContainerId = container.Container.Id;
            if(container.Stats is null)
            {
                return;
            }

            var cpuHistory = container.Stats.CpuPercentHistory;
            if (cpuHistory is not null)
            {
                _cpuStats = cpuHistory;
                _cpuHeader = $"CPU {Math.Round(container.Stats.CpuPercent)}%";

            }

            var memoryUsageHistory = _containers[0].Stats?.MemoryUsageHistory;
            if (memoryUsageHistory is not null)
            {
                _memoryUsage = memoryUsageHistory.Select(x=>new DoubleTime(x.Time, x.Value / (1024.0*1024.0))).ToList();
                _memoryHeader = "Memory Usage " + container.Stats.MemoryUsage.Bytes().Humanize(CultureInfo.InvariantCulture);
            }
        }
    }

    private async void OnContainerStatsUpdated(object? sender, string containerId)
    {
        if(_monitorContainerId == containerId)
        {
            try
            {
                await RefreshStatsAsync();
                await InvokeAsync(() =>
                {
                    this.StateHasChanged();
                });
            }
            catch { }
        }
    }

    protected override void OnInitialized()
    {
        containerStatsUpdateProvider.ContainerStatsUpdated += OnContainerStatsUpdated;
        base.OnInitialized();
    }

    public void Dispose()
    {
        containerStatsUpdateProvider.ContainerStatsUpdated -= OnContainerStatsUpdated;
    }
}
