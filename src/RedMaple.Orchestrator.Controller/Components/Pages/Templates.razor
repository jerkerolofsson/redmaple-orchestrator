@rendermode InteractiveServer
@page "/templates"
@using RedMaple.Orchestrator.Controller.Components.Dialogs
@inject IDeploymentTemplateProvider templateProvider
@inject IDialogService dialogService
@inject NavigationManager navigationManager

<MudPopoverProvider />
<MudDialogProvider />

<MudStack Row="true" AlignItems="AlignItems.Center" Class="mb-5" Spacing="2">
    <MudText Typo="Typo.h6">Templates</MudText>
    <MudSpacer />
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="async () => await AddTemplateAsync()"><i class="fa fa-plus" />&nbsp;Add</MudButton>
</MudStack>

<MudPaper Class="pa-5">

    <MudDataGrid Bordered="true" Dense="true"
                 ReadOnly="false"
                 Filterable="true"
                 Items="@_templates"
                 SortMode="SortMode.Multiple">
        <Columns>

            <TemplateColumn Title="Name">
                <CellTemplate>
                    <a href="/templates/@context.Item.Name">@context.Item.Name</a>
                </CellTemplate>
            </TemplateColumn>

            <PropertyColumn Property="x => x.Category" Title="Category" />

            <TemplateColumn StickyRight="true">
                <CellTemplate>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="async () => await DeleteTemplateAsync(context.Item.Name)"/>
                </CellTemplate>
            </TemplateColumn>

        </Columns>

        <PagerContent>
            <MudDataGridPager T="DeploymentPlanTemplate" PageSizeOptions=@(new int[] {10, 25, 50}) />
        </PagerContent>

    </MudDataGrid>
</MudPaper>

@code {
    private List<DeploymentPlanTemplate> _templates = new();

    private async Task AddTemplateAsync()
    {
        var dialog = await dialogService.ShowAsync<EnterNameDialog>();
        var result = await dialog.Result;
        if (result?.Canceled == false && result.Data is not null)
        {
            var templateName = result.Data.ToString();
            if(templateName is null)
            {
                return;
            }
            var existingTemplate = await templateProvider.GetTemplateByNameAsync(templateName);
            if(existingTemplate is {})
            {
                await dialogService.ShowMessageBox(
                 "Conflict",
                 "A template with this name already exists",
                 cancelText: "Cancel");
                return;
            }

            await templateProvider.SaveTemplateAsync(new DeploymentPlanTemplate
                {
                    IconUrl = "apps.png",
                    Name = templateName,
                    Plan = ""
                });

            navigationManager.NavigateTo($"/templates/{templateName}");
        }
    }

    private async Task DeleteTemplateAsync(string templateName)
    {
        await templateProvider.DeleteTemplateAsync(templateName);
        await LoadTemplatesAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTemplatesAsync();
    }

    private async Task LoadTemplatesAsync()
    {
        _templates = (await templateProvider.GetTemplatesAsync()).OrderBy(x=>x.Name).ToList();
    }
}