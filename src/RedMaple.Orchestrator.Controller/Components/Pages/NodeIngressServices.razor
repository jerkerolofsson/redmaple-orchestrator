@page "/node/{id}/ingress"
@using MudBlazor
@using MudExtensions
@using RedMaple.Orchestrator.Contracts.Ingress
@using RedMaple.Orchestrator.Controller.Domain;
@using RedMaple.Orchestrator.Controller.Domain.GlobalDns
@using RedMaple.Orchestrator.Controller.Domain.Ingress;
@rendermode InteractiveServer
@inject IIngressManager ingressManager
@inject NavigationManager navigationManager
@inject INodeManager nodeManager
@inject IGlobalDns dns
@inject ISnackbar Snackbar

<MudThemeProvider IsDarkMode="true" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<div class="buttons">
    <MudButton 
    Variant="Variant.Filled" 
    Color="Color.Primary" 
    @onclick="OnCreate">Create</MudButton>

    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="RepairAsync">Repair</MudButton>
</div>

<MudPaper Class="pa-5">

    <h1>Ingress Services</h1>

    @if(_services.Count == 0)
    {
        <MudAlert Severity="Severity.Warning">No ingress services created</MudAlert>
    }
    else
    {
        <MudDataGrid Bordered="true" Dense="true"
        ReadOnly="false"
        Items="@_services"
        SortMode="SortMode.Multiple">
            <Columns>
                <TemplateColumn Title="Ingress">
                    <CellTemplate>
                        @{
                            string url = $"https://{context.Item.Service.DomainName}";
                        }
                        <a target="_blank" href="@url">@url</a>
                    </CellTemplate>
                </TemplateColumn>

                <TemplateColumn Title="Application">
                    <CellTemplate>
                        @{
                            string url = $"{context.Item.Service.Scheme}://{context.Item.Service.DestinationIp}:{context.Item.Service.DestinationPort}";
                        }
                        <a target="_blank" href="@url">@url</a>
                    </CellTemplate>
                </TemplateColumn>

                <TemplateColumn StickyRight="true">
                    <CellTemplate>
                        <MudLoadingButton 
                        Class="btn-delete"
                        ButtonVariant="ButtonVariant.Button"
                        @bind-Loading="@context.Item.IsLoading"
                        LoadingCircularColor="Color.Primary" 
                        OnClick="async () => await DeleteAsync(context.Item)">
                            <ChildContent>
                                <i class="fa fa-trash"></i>&nbsp;Delete
                            </ChildContent>
                            <LoadingContent>
                                LOADING
                            </LoadingContent>
                        </MudLoadingButton>
                    </CellTemplate>
                </TemplateColumn>

            </Columns>
        </MudDataGrid>
    }
</MudPaper>

@code {

    internal class Model
    {
        public required IngressServiceDescription Service { get; set; }
        public bool IsLoading {get;set;}
    }


    private List<Model> _services = new();

    [Parameter] public string Id { get; set; } = null!;


    private async Task DeleteAsync(Model model)
    {
        var service = model.Service;
        model.IsLoading = true;
        this.StateHasChanged();

        await ingressManager.DeleteIngressServiceAsync(service.Id, CancellationToken.None);
        await LoadServicesAsync();
        model.IsLoading = false;
        this.StateHasChanged();
    }

    private void OnCreate()
    {
        navigationManager.NavigateTo($"/node/{Id}/create-ingress");
    }

    private async Task LoadServicesAsync()
    {
        var nodes = await nodeManager.GetNodesAsync();
        var node = nodes.Where(x => x.Id == Id).FirstOrDefault();
        if (node is null)
        {
            throw new ArgumentException("Node not found");
        }

        // Add a services
        var services = await ingressManager.GetServicesAsync();
        _services = services.Where(x => x.IngressIp == node.IpAddress).Select(x=>new Model() { Service = x}).ToList();
    }

    private async Task RepairAsync()
    {
        var entries = await dns.GetDnsEntriesAsync();
        List<DnsEntry> newEntries = new();
        foreach(var service in _services)
        {
            var entry = entries.Where(x => x.Hostname == service.Service.DomainName).FirstOrDefault();

            if(entry is null)
            {
                Snackbar.Add($"Repairing {service.Service.DomainName}");
                newEntries.Add(new DnsEntry
                    {
                        Hostname = service.Service.DomainName,
                        IpAddress = service.Service.DestinationIp,
                        Region = service.Service.Region,
                        IsGlobal = true
                    });
            }
        }

        await dns.AddDnsEntriesAsync(newEntries.ToArray());
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadServicesAsync();

    }
}