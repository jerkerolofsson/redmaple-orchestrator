@rendermode InteractiveServer
@page "/templates"
@using RedMaple.Orchestrator.Controller.Components.Dialogs
@inject IDeploymentTemplateProvider templateProvider
@inject IDialogService dialogService
@inject NavigationManager navigationManager

<MudPopoverProvider />
<MudDialogProvider />

<MudPaper Class="pa-5">

    <MudDataGrid Bordered="true" Dense="true"
        Hover="true"
        ReadOnly="false"
        Filterable="true"
        Items="@_templates"
        SortMode="SortMode.Multiple">

        <ToolBarContent>
            <MudStack Row="true" AlignItems="AlignItems.Center" Style="width: 100%">
                <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="async () => await AddTemplateAsync()" />
                <MudText Typo="Typo.h6">Templates</MudText>
                <MudSpacer />
                <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </MudStack>
        </ToolBarContent>

        <Columns>

            <TemplateColumn Title="Name">
                <CellTemplate>

                    <a href="/templates/@context.Item.Name">
                        <div style="display: flex; align-items: center">

                            @if(context.Item.IconUrl is not null)
                            {
                                <img src="@context.Item.IconUrl" style="width: 32px; margin-right: 8px;"/>
                            }
                            <div>@context.Item.Name</div>
                        </div>
                    </a>
                </CellTemplate>
            </TemplateColumn>

            <PropertyColumn Property="x => x.Category" Title="Category" />

            <TemplateColumn StickyRight="true">
                <CellTemplate>
                    <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="async () => await DeleteTemplateAsync(context.Item.Name)"/>
                </CellTemplate>
            </TemplateColumn>

        </Columns>

        <PagerContent>
            <MudDataGridPager T="DeploymentPlanTemplate" PageSizeOptions=@(new int[] {10, 25, 50}) />
        </PagerContent>

    </MudDataGrid>
</MudPaper>

@code {
    private List<DeploymentPlanTemplate> _templates = new();

    private async Task AddTemplateAsync()
    {
        var dialog = await dialogService.ShowAsync<EnterNameDialog>();
        var result = await dialog.Result;
        if (result?.Canceled == false && result.Data is not null)
        {
            var templateName = result.Data.ToString();
            if(templateName is null)
            {
                return;
            }
            var existingTemplate = await templateProvider.GetTemplateByNameAsync(templateName);
            if(existingTemplate is {})
            {
                await dialogService.ShowMessageBox(
                 "Conflict",
                 "A template with this name already exists",
                 cancelText: "Cancel");
                return;
            }

            await templateProvider.SaveTemplateAsync(new DeploymentPlanTemplate
                {
                    IconUrl = "apps.png",
                    Name = templateName,
                    Plan = ""
                });

            navigationManager.NavigateTo($"/templates/{templateName}");
        }
    }

    private async Task DeleteTemplateAsync(string templateName)
    {
        await templateProvider.DeleteTemplateAsync(templateName);
        await LoadTemplatesAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadTemplatesAsync();
    }

    private async Task LoadTemplatesAsync()
    {
        _templates = (await templateProvider.GetTemplatesAsync()).OrderBy(x=>x.Name).ToList();
    }

    private string? _searchString = null;

    private async Task OnSearch(string text)
    {
        _searchString = text;
        _templates = (await templateProvider.GetTemplatesAsync())
        .Where(x => x.Name.Contains(_searchString, StringComparison.InvariantCultureIgnoreCase) || x.Category?.Contains(_searchString, StringComparison.InvariantCultureIgnoreCase) == true)
        .OrderBy(x => x.Name).ToList();
    }
}