@page "/resources"
@using RedMaple.Orchestrator.Controller.Components.Dialogs
@using RedMaple.Orchestrator.Utilities
@rendermode InteractiveServer
@inject NavigationManager navigationManager
@inject IClusterResourceManager resourceManager
@inject IDialogService dialogService

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<ProgressView Visible="_loading" @ref="_progress" />
@if(_error is not null)
{
    <MudAlert Severity="Severity.Error">@_error</MudAlert>
}
else if(!_loading)
{
    <div class="buttons">
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   @onclick="async () => await AddConnectionStringAsync()">Add Connection String</MudButton>

        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   @onclick="async () => await AddVolumeAsync()">Add Volume</MudButton>

        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   @onclick="async () => await AddOidcServerAsync()">Add OIDC Server</MudButton>
    </div>


    <MudText Typo="Typo.h6">Resources</MudText>

    <MudDataGrid Bordered="true" Dense="true"
                    EditMode="DataGridEditMode.Cell"
                    Items="@_resources"
                    SortMode="SortMode.Multiple">
        <Columns>

            <TemplateColumn Title="Name">
                <CellTemplate>
                    @{
                        var url = $"/resources/{context.Item.Id}";
                        var icon = "/resource-icons/resource.png";
                        if(context.Item.Kind == ResourceKind.Volume)
                        {
                            icon = "/resource-icons/volume.png";
                        }
                    }
                    <a href="@url">
                        <div style="display: flex; align-items: center">
                        <img src="@icon" class="icon" alt="@context.Item.Kind.ToString()" />
                        <div>@context.Item.Name</div>
                        </div>
                    </a>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.Kind" Title="Kind" />
        </Columns>
    </MudDataGrid>
}
@code {
    private ProgressView _progress = null!;

    private List<ClusterResource> _resources = new();
    private bool _loading = false;
    private string? _error = null;    
    private CancellationTokenSource? _cancellationTokenSource = null;

    private async Task<string?> EnterNameAsync()
    {
        var dialog = await dialogService.ShowAsync<EnterNameDialog>();
        var result = await dialog.Result;
        if (result?.Canceled == false && result.Data is not null)
        {
            return result.Data.ToString();
        }
        return null;
    }

    private async Task AddOidcServerAsync()
    {
        var name = await EnterNameAsync();
        if (name is not null)
        {
            var resource = new ClusterResource
                {
                    Id = Guid.NewGuid().ToString(),
                    Name = name,
                    Persist = true,
                    Slug = SlugGenerator.Generate(name),
                    Kind = ResourceKind.OidcServer,
                    EnvironmentVariables = new Dictionary<string, string>
                    {
                        ["OIDC_AUTHORITY"] = "https://identityserver"
                    }
                };
            await resourceManager.AddResourceAsync(resource);
            navigationManager.NavigateTo($"/resources/{resource.Id}");
        }
    }

    private async Task AddVolumeAsync()
    {
        var name = await EnterNameAsync();
        if (name is not null)
        {
            var slug = SlugGenerator.Generate(name);
            var resource = new ClusterResource
                {
                    Id = Guid.NewGuid().ToString(),
                    Name = name,
                    Slug = slug,
                    Persist = true,
                    Kind = ResourceKind.Volume,
                    EnvironmentVariables = new Dictionary<string, string>
                    {
                    },
                    Volume = new VolumeResource
                    {
                        Name = name,
                        Slug  = slug,
                        Driver = "local",
                        FileMode = "0777",
                        DirMode = "0777",
                        Username = "Guest",
                        Password = "Guest",
                        Type = "cifs",
                        Location = "//server-name/dir"
                    }
                };
            await resourceManager.AddResourceAsync(resource);
            navigationManager.NavigateTo($"/resources/{resource.Id}");
        }
    }

    private async Task AddConnectionStringAsync()
    {
        var name = await EnterNameAsync();
        if (name is not null)
        {
            var resource = new ClusterResource
                {
                    Id = Guid.NewGuid().ToString(),
                    Name = name,
                    Slug = SlugGenerator.Generate(name),
                    Persist = true,
                    Kind = ResourceKind.ConnectionString,
                    EnvironmentVariables = new Dictionary<string, string>
                    {
                        ["ConnectionStrings__resourcename"] = "Server=127.0.0.1;User ID=admin;Password=password"
                    }
                };
            await resourceManager.AddResourceAsync(resource);
            navigationManager.NavigateTo($"/resources/{resource.Id}");
        }
    }

    private void Cancel()
    {
        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource = null;
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadResourcesAsync();
    }

    private async Task LoadResourcesAsync()
    {
        _resources = await resourceManager.GetClusterResourcesAsync();
    }
}