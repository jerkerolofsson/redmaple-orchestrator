@page "/secrets/secret/{id}"
@using RedMaple.Orchestrator.Contracts.Secrets
@using RedMaple.Orchestrator.Controller.Components.Dialogs
@using RedMaple.Orchestrator.Utilities
@using RedMaple.Orchestrator.Controller.Domain.Cluster
@using System.Text
@rendermode InteractiveServer
@inject NavigationManager navigationManager
@inject ISecretsManager secretsManager
@inject IDialogService dialogService

<MudThemeProvider IsDarkMode="true"/>
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@if(!_hasKey)
{
    <MudAlert>Application is not configured correctly. The REDMAPLE_ENCR_KEY environment variable is missing.</MudAlert>
}

@if (_secret is not null && _hasKey)
{
    <MudBreadcrumbs Items="_nav"></MudBreadcrumbs>

    @if(_loading)
    {
        <MudProgressLinear Color="Color.Secondary" Indeterminate="true"/>
    }

    <MudItem Style="max-width: 1200px">
        <MudPaper Class="pa-3">

            <MudTabs>
                <MudTabPanel Text="Text">
                    <Setting Title="Set secret from text">
                        <MudStack Row="true">
                            <MudTextField @bind-Value="@_encryptText"></MudTextField>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="EncryptTextAsync">Encrypt</MudButton>
                        </MudStack>
                    </Setting>

                    <Setting Title="Show Secret">
                        <MudStack Row="true">
                            <MudButton Variant="Variant.Outlined" Color="Color.Warning" OnClick="DecryptTextAsync">Decrypt and Show Secret</MudButton>
                        </MudStack>
                    </Setting>
                </MudTabPanel>

                <MudTabPanel Text="Hex">
                    <Setting Title="Set secret from hex">
                        <MudStack Row="true">
                            <MudTextField @bind-Value="@_encryptHex"></MudTextField>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="EncryptHexAsync">Encrypt</MudButton>
                        </MudStack>
                    </Setting>

                    <Setting Title="Show Secret">
                        <MudStack Row="true">
                            <MudButton Variant="Variant.Outlined" Color="Color.Warning" OnClick="DecryptBytesAsync">Decrypt and Show Secret</MudButton>
                        </MudStack>
                    </Setting>
                </MudTabPanel>

                <MudTabPanel Text="Base 64">
                    <Setting Title="Set secret from base 64">
                        <MudStack Row="true">
                            <MudTextField @bind-Value="@_encryptBase64"></MudTextField>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="EncryptBase64Async">Encrypt</MudButton>
                        </MudStack>
                    </Setting>

                    <Setting Title="Show Secret">
                        <MudStack Row="true">
                            <MudButton Variant="Variant.Outlined" Color="Color.Warning" OnClick="DecryptBytesAsync">Decrypt and Show Secret</MudButton>
                        </MudStack>
                    </Setting>
                </MudTabPanel>


                <MudTabPanel Text="File">
                    <Setting Title="Upload file as secret">
                        <MudStack Row="true">
                            <InputFile OnChange="OnFile"/>
                        </MudStack>
                    </Setting>
                </MudTabPanel>
            </MudTabs>


            <Setting Title="Slug">
                @_secret.Slug
            </Setting>

            @if (_decryptedBytes is not null)
            {
                <Setting Title="Hex">
                    @Convert.ToHexString(_decryptedBytes)
                </Setting>
                <Setting Title="Base 64">
                    @Convert.ToBase64String(_decryptedBytes)
                </Setting>
            }

            @if (_decryptedString is not null)
            {
                <Setting Title="Text">
                    @_decryptedString
                </Setting>
            }

        </MudPaper>
    </MudItem>
}

@code {
    [Parameter] public string? Id{ get; set; }

    private RedMaple.Orchestrator.Contracts.Secrets.Secret? _secret;
    private bool _hasKey = false;
    private bool _loading = false;

    private string _encryptText = "";
    private string _encryptHex = "";
    private string _encryptBase64 = "";

    private byte[]? _decryptedBytes = null;
    private string? _decryptedString = null;

    private bool _hasEnteredAdminPassword = false;

    private async Task EnterAdminPasswordAsync()
    {
        if(_hasEnteredAdminPassword)
        {
            return;
        }
        var dialog = await dialogService.ShowAsync<EnterAdminPasswordDialog>();
        var result = await dialog.Result;
        if (result?.Canceled == false && result.Data is string password)
        {
            if (password == Environment.GetEnvironmentVariable("REDMAPLE_SECRET_PASSWORD"))
            {
                _hasEnteredAdminPassword = true;
                this.StateHasChanged();
            }
        }
    }


    private async Task OnFile(InputFileChangeEventArgs e)
    {
        await EnterAdminPasswordAsync();
        if (!_hasEnteredAdminPassword)
        {
            return;
        }

        _loading = true;
        this.StateHasChanged();

        using var memoryStream = new MemoryStream();
        using var input = e.File.OpenReadStream();
        await input.CopyToAsync(memoryStream);

        if (_secret is not null)
        {
            var bytes = memoryStream.ToArray();
            await secretsManager.EncryptSecretAsync(_secret, bytes);
        }

        _loading = false;
    }

    private async Task EncryptBase64Async()
    {
        await EnterAdminPasswordAsync();
        if (!_hasEnteredAdminPassword)
        {
            return;
        }

        _loading = true;
        this.StateHasChanged();

        if (_secret is not null)
        {
            var bytes = Convert.FromHexString(_encryptBase64);
            await secretsManager.EncryptSecretAsync(_secret, bytes);
        }

        _loading = false;
    }
    private async Task EncryptHexAsync()
    {
        await EnterAdminPasswordAsync();
        if (!_hasEnteredAdminPassword)
        {
            return;
        }

        _loading = true;
        this.StateHasChanged();
        if (_secret is not null)
        {
            var bytes = Convert.FromHexString(_encryptHex);
            await secretsManager.EncryptSecretAsync(_secret, bytes);
        }

        _loading = false;
    }
    private async Task EncryptTextAsync()
    {
        await EnterAdminPasswordAsync();
        if (!_hasEnteredAdminPassword)
        {
            return;
        }


        _loading = true;
        this.StateHasChanged();
        if (_secret is not null)
        {
            var bytes = Encoding.UTF8.GetBytes(_encryptText);
            await secretsManager.EncryptSecretAsync(_secret, bytes);
        }

        _loading = false;
    }

    private async Task DecryptBytesAsync()
    {
        await EnterAdminPasswordAsync();
        if (!_hasEnteredAdminPassword)
        {
            return;
        }

        _decryptedBytes = null;
        _decryptedString = null;

        _loading = true;
        this.StateHasChanged();

        if (_secret is not null)
        {
            _decryptedBytes = await secretsManager.DecryptSecretAsync(_secret);
        }

        _loading = false;
    }

    private async Task DecryptTextAsync()
    {
        await EnterAdminPasswordAsync();
        if(!_hasEnteredAdminPassword)
        {
            return;
        }

        await DecryptBytesAsync();
        if (_decryptedBytes is not null)
        {
            _decryptedString = Encoding.UTF8.GetString(_decryptedBytes);
        }
    }

    private List<BreadcrumbItem> _nav = new List<BreadcrumbItem>();

    protected override async Task OnParametersSetAsync()
    {
        _hasKey = false;
        var key = Environment.GetEnvironmentVariable("REDMAPLE_ENCR_KEY");
        if(key is null || Id is null)
        {
            return;
        }
        _hasKey = true;

        _secret = await secretsManager.GetSecretAsync(Id);

        // Breadcrumbs
        _nav.Add(new("Home", "/"));
        _nav.Add(new("Secrets", "/secrets"));
        if(_secret is not null)
        {
            _nav.Add(new(_secret.Name, $"/secrets/secret/{_secret.Slug}"));
        }

    }


    private async Task OnValidSubmitAsync()
    {
        if (_secret is not null)
        {
            await secretsManager.SaveSecretAsync(_secret);
            navigationManager.NavigateTo("/secrets");
        }
    }
}