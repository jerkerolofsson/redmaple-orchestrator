@page "/resources/connection-strings"
@using IdentityModel.Client
@using RedMaple.Orchestrator.Controller.Components.Dialogs
@using RedMaple.Orchestrator.Utilities
@rendermode InteractiveServer
@inject NavigationManager navigationManager
@inject IClusterResourceManager resourceManager
@inject IDialogService dialogService
@inject ISnackbar snackbar

<MudThemeProvider IsDarkMode="true" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<ClusterResourceTable Title="Connection Strings" AddClicked="AddConnectionStringAsync" Kind="ResourceKind.ConnectionString" />

@code {
    private async Task<string?> EnterNameAsync()
    {
        var dialog = await dialogService.ShowAsync<EnterNameDialog>();
        var result = await dialog.Result;
        if (result?.Canceled == false && result.Data is not null)
        {
            return result.Data.ToString();
        }
        return null;
    }

    private async Task AddConnectionStringAsync()
    {
        var name = await EnterNameAsync();
        if (name is not null)
        {
            var slug = SlugGenerator.Generate(name);
            var resource = new ClusterResource
            {
                Id = Guid.NewGuid().ToString(),
                Name = name,
                Persist = true,
                Slug = slug,
                Kind = ResourceKind.ConnectionString,
                EnvironmentVariables = new Dictionary<string, string>
                {
                    {"ConnectionStrings__" + name, ""}                    
                }
            };

            await resourceManager.AddResourceAsync(resource);
            navigationManager.NavigateTo($"/resources/resource/{resource.Id}");
        }
        else
        {
            snackbar.Add("Invalid URL");
        }
    }
}