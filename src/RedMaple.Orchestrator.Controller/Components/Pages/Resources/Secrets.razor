@page "/secrets"
@using RedMaple.Orchestrator.Contracts.Secrets
@using RedMaple.Orchestrator.Controller.Components.Dialogs
@using RedMaple.Orchestrator.Utilities
@using RedMaple.Orchestrator.Controller.Domain.Cluster
@rendermode InteractiveServer
@inject NavigationManager navigationManager
@inject ISecretsManager secretsManager
@inject IDialogService dialogService

<MudThemeProvider IsDarkMode="true"/>
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@if (!_hasKey)
{
    <MudAlert Severity="Severity.Error">Encryption key configuration missing (REDMAPLE_ENCR_KEY)</MudAlert>
}
else
{
    <ClusterSecretsTable AddClicked="AddSecretAsync" />
}

@code {

    private bool _hasKey = false;

    protected override void  OnParametersSet()
    {
        _hasKey = false;
        var key = Environment.GetEnvironmentVariable("REDMAPLE_ENCR_KEY");
        if (key is null)
        {
            return;
        }
        _hasKey = true;
    }


    private async Task<string?> EnterNameAsync()
    {
        var dialog = await dialogService.ShowAsync<EnterNameDialog>();
        var result = await dialog.Result;
        if (result?.Canceled == false && result.Data is not null)
        {
            return result.Data.ToString();
        }
        return null;
    }


    private async Task AddSecretAsync()
    {
        if(!_hasKey)
        {
            return;
        }

        var name = await EnterNameAsync();
        if (name is not null)
        {
            var secret = secretsManager.CreateSecret(name);
            await secretsManager.AddSecretAsync(secret);
            navigationManager.NavigateTo($"/secrets/secret/{secret.Id}");
        }
    }
}