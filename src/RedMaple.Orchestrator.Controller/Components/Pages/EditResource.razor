@page "/resources/{id}"
@using RedMaple.Orchestrator.Utilities
@rendermode InteractiveServer
@inject IClusterResourceManager resourceManager
@inject NavigationManager navigationManager
@inject IDialogService dialogService

<MudPopoverProvider />
<MudDialogProvider />

@if(model is not null)
{
    <EditForm Model="@model" OnValidSubmit="async () => await OnValidSubmitAsync()">
        <DataAnnotationsValidator />
        <MudCard Class="pa-5 mt-5">
            <MudItem>
                <MudText Typo="Typo.h6">Resource Name</MudText>
                <MudTextField Label="Name"
                              Class="mt-5 pa-5"
                              @bind-Value="model.Name"
                              For="@(() => model.Name)" />

                @if(model.Persist)
                {
                    <MudText Typo="Typo.h6">Options</MudText>
                    <MudSwitch @bind-Value="model.IsGlobal" Label="Global Resource" Color="Color.Primary"/>
                }
            </MudItem>
        </MudCard>
        <MudCard Class="pa-5 mt-5">
             <MudItem>
                <MudText Typo="Typo.h6">Environment Variables</MudText>
                @{
                    bool readOnly = !model.Persist;
                }
                <EnvironmentVariableEditor ReadOnly="@readOnly" EnvironmentVariables="@model.EnvironmentVariables" />
            </MudItem>
        </MudCard>

        @if (model.Persist)
        {
            <MudStack Row="true" AlignItems="AlignItems.Start" Class="mt-5">
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">Save</MudButton>
                <MudButton
                    OnClick="async () => await DeleteAsync()"
                    ButtonType="ButtonType.Button" Color="Color.Error" Variant="Variant.Filled" Class="ml-auto">Delete</MudButton>
            </MudStack>
        }
        else
        {
            <MudAlert class="mt-5" Variant="Variant.Text">This resource is read-only</MudAlert>
        }
    </EditForm>
}

@code {
    private ClusterResource? model = null!;

    [Parameter]
    public string Id { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        model = await resourceManager.GetClusterResourceAsync(Id);
    }

    private async Task OnValidSubmitAsync()
    {
        if (model is not null)
        {
            model.Slug = SlugGenerator.Generate(model.Name);
            await resourceManager.SaveResourceAsync(model);

            navigationManager.NavigateTo("/resources");
        }
    }

    private async Task DeleteAsync()
    {
        if (model is null)
        {
            return;
        }
        bool? result = await dialogService.ShowMessageBox(
           "Confirm",
           "Do you really want to delete the resource",
           yesText: "Yeah", cancelText: "Cancel");
        if (result == true)
        {
            await resourceManager.RemoveResourceAsync(model);

            navigationManager.NavigateTo("/resources");

        }
    }
}