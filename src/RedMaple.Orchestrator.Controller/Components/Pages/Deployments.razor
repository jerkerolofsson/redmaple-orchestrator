@page "/deployments"
@using RedMaple.Orchestrator.Contracts.Deployments
@using RedMaple.Orchestrator.Controller.Components.Views
@using RedMaple.Orchestrator.Controller.Domain.Deployments
@rendermode InteractiveServer
@inject NavigationManager navigationManager
@inject IDeploymentManager deploymentManager
@inject IDialogService dialogService

<MudThemeProvider IsDarkMode="true"/>
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<ProgressView Visible="_loading" @ref="_progress" />
@if(_error is not null)
{
    <MudAlert Severity="Severity.Error">@_error</MudAlert>
}
else if(!_loading)
{
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" ActivePanelIndex="@_activeTabIndex" ActivePanelIndexChanged="FilterDeployments">
        @foreach (var category in _categories)
        {
            <MudTabPanel Text="@category">
                <MudDataGrid Bordered="true" Dense="true"
                EditMode="DataGridEditMode.Cell"
                Items="@_filteredPlans"
                SortMode="SortMode.Multiple">

                    <ToolBarContent>
                        <MudStack Row="true" AlignItems="AlignItems.Center" Style="width: 100%">
                            <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="OnCreate" />
                            <MudText Typo="Typo.h6">@category</MudText>
                            <MudSpacer />
                            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            <SelectRegion Region="@_region" RegionChanged="OnRegionChanged" Regions="@_regions" />
                        </MudStack>
                    </ToolBarContent>
                    <Columns>
                        <TemplateColumn StickyLeft="true"HeaderStyle="width: 10px">
                            <HeaderTemplate>
                                <i class="fa fa-globe" />
                            </HeaderTemplate>
                            <CellTemplate>
                                @if(!string.IsNullOrEmpty(context.Item.Region))
                                {
                                    <MudChip Color="Color.Secondary" Variant="Variant.Outlined"  Size="Size.Small">@context.Item.Region</MudChip>
                                }
                            </CellTemplate>
                        </TemplateColumn>

                        <TemplateColumn StickyLeft="true" HeaderStyle="width: 1rem">
                            <CellTemplate>
                                @if (context.Item.IconUrl is not null)
                                {
                                    <img src="@context.Item.IconUrl" class="deployment-icon" alt="logo" />
                                }
                                else
                                {
                                    <img src="/data-server.png" class="deployment-icon" alt="logo" />
                                }
                            </CellTemplate>
                        </TemplateColumn>

                        <TemplateColumn Title="Name">
                            <CellTemplate>
                                @{
                                    string url = $"/deployments/{context.Item.Slug}";
                                }
                                <a target="_blank" href="@url">@context.Item.Name</a>
                            </CellTemplate>
                        </TemplateColumn>

                        <TemplateColumn Title="Health">
                            <CellTemplate>
                                <HealthBadge Health="@context.Item.Health" />
                            </CellTemplate>
                        </TemplateColumn>

                        <TemplateColumn Title="Ingress">
                            <CellTemplate>
                                @if (context.Item.DomainName is not null && context.Item.CreateIngress)
                                {
                                    string url = $"https://{context.Item.DomainName}";
                                    <a target="_blank" href="@url">@url</a>
                                }
                            </CellTemplate>
                        </TemplateColumn>

                        <TemplateColumn Title="Application">
                            <CellTemplate>
                                @if (!context.Item.Up)
                                {
                                    <MudText Typo="Typo.body1" Color="Color.Error">-</MudText>
                                }
                                else
                                {
                                    @foreach (var appServerIp in context.Item.ApplicationServerIps)
                                    {
                                        string url = $"{context.Item.ApplicationProtocol}://{appServerIp}:{context.Item.ApplicationServerPort}";
                                        if (context.Item.ApplicationProtocol == "http" || context.Item.ApplicationProtocol == "https")
                                        {
                                            <a href="@url">@url</a>
                                        }
                                        else
                                        {
                                            <span>@url</span>
                                        }
                                    }
                                }
                            </CellTemplate>
                        </TemplateColumn>

                        <PropertyColumn  Title="Version" Property="x => x.Version" ></PropertyColumn>

                        <TemplateColumn StickyRight="true">
                            <CellTemplate>
                                <MudStack Row="true">
                                    @if (context.Item.Up)
                                    {
                                        <MudButton OnClick="async() => await TakeDownAsync(context.Item)">Take Down</MudButton>
                                    }
                                    else
                                    {
                                        <MudButton OnClick="async() => await BringUpAsync(context.Item)">Bring Up</MudButton>
                                    }

                                    <MudSpacer/>

                                    <MudMenu Icon="@Icons.Material.Filled.MoreVert">

                                        @{
                                            string url = $"/deployments/{context.Item.Slug}/edit";
                                        }
                                        <MudMenuItem Href="@url">Edit
                                        </MudMenuItem>

                                        <MudMenuItem OnClick="async() => await PullImagesAsync(context.Item)">
                                            Pull Images
                                        </MudMenuItem>

                                        <MudMenuItem OnClick="async() => await RestartAsync(context.Item)">
                                            Restart
                                        </MudMenuItem>

                                        <MudMenuItem OnClick="async() => await DeleteAsync(context.Item)">
                                            Delete
                                        </MudMenuItem>

                                    </MudMenu>
                                </MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </MudTabPanel>
        }
    </MudTabs>

    <div class="mt-3 ml-3">@_filteredPlans.Count / @_plans.Count deployment(s)</div>
}
@code {
    private bool _loading = false;
    private ProgressView _progress = null!;

    private List<string> _categories = new();
    private List<DeploymentPlan> _plans = new();
    private List<DeploymentPlan> _filteredPlans = new();
    private string? _error = null;    
    private CancellationTokenSource? _cancellationTokenSource = null;

    private void OnCreate()
    {
        navigationManager.NavigateTo($"/create-deployment");
    }

    private void Cancel()
    {
        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource = null;
    }

    private async Task RestartAsync(DeploymentPlan plan)
    {
        await PullImagesAsync(plan);

        _loading = true;
        _error = null;
        _progress.Begin();
        this.StateHasChanged();

        _cancellationTokenSource = new();
        var token = _cancellationTokenSource.Token;
        await Task.Run(async () =>
        {
            try
            {
                await deploymentManager.RestartAsync(plan, _progress, token);
            }
            catch (Exception ex)
            {
                _error = ex.ToString();
            }
            finally
            {
                _loading = false;
                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });

            }
        });
    }

    private async Task PullImagesAsync(DeploymentPlan plan)
    {
        _loading = true;
        _error = null;
        _progress.Begin();
        this.StateHasChanged();

        _cancellationTokenSource = new();
        var token = _cancellationTokenSource.Token;
        await Task.Run(async () =>
        {
            try
            {
                await deploymentManager.PullImagesAsync(plan, _progress, _progress, token);
            }
            catch (Exception ex)
            {
                _error = ex.ToString();
                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
                await Task.Delay(TimeSpan.FromSeconds(10));
            }
            finally
            {
                _loading = false;
                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });

            }
        });
    }

    private async Task BringUpAsync(DeploymentPlan plan)
    {
        _loading = true;
        _error = null;
        _progress.Begin();
        this.StateHasChanged();

        _cancellationTokenSource = new();
        var token = _cancellationTokenSource.Token;
        await Task.Run(async () =>
        {
            try
            {
                await deploymentManager.PullImagesAsync(plan, _progress, _progress, token);
                await deploymentManager.BringUpAsync(plan, _progress, token);
            }
            catch(Exception ex)
            {
                _error = ex.ToString();
                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
                await Task.Delay(TimeSpan.FromSeconds(10));
            }
            finally
            {
                _loading = false;
                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });

            }
        });
    }

    private async Task DeleteAsync(DeploymentPlan plan)
    {
        bool? result = await dialogService.ShowMessageBox(
           "Confirm",
           "Do you really want to delete the deployment",
           yesText: "Yeah", cancelText: "Cancel");
        if (result == true)
        {
            _loading = true;
            _error = null;
            _progress.Begin();
            this.StateHasChanged();

            _cancellationTokenSource = new();
            var token = _cancellationTokenSource.Token;
            await Task.Run(async () =>
            {
                try
                {
                    await deploymentManager.DeleteAsync(plan, _progress, token);
                }
                catch (Exception ex)
                {
                    _error = ex.ToString();
                }
                finally
                {
                    await LoadPlansAsync();
                    _loading = false;
                    await InvokeAsync(() =>
                    {
                        StateHasChanged();
                    });

                }
            });
        }
    }

    private async Task TakeDownAsync(DeploymentPlan plan)
    {
        _loading = true;
        _error = null;
        _progress.Begin();
        this.StateHasChanged();

        _cancellationTokenSource = new();
        var token = _cancellationTokenSource.Token;
        await Task.Run(async () =>
        {
            try
            {
                await deploymentManager.TakeDownAsync(plan, _progress, token);
            }
            catch (Exception ex)
            {
                _error = ex.ToString();
            }
            finally
            {
                _loading = false;
                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });

            }
        });

    }

    protected override async Task OnInitializedAsync()
    {
        await LoadPlansAsync();
    }

    private async Task LoadPlansAsync()
    {
        _plans = await deploymentManager.GetDeploymentPlansAsync();

        if (_regions is null)
        {
            _regions = ["Global", .. _plans.Where(x => x.Region != null).Select(x => x.Region!).OrderBy(x => x).Distinct().ToArray()];
        }

        _categories.Clear();
        _categories.Add("Apps");
        _categories.Add("Services");
        _categories.Add("Development");
        _categories.Add("Test");
        foreach (var plan in _plans)
        {
            plan.Category ??= "Apps";
            if (!_categories.Contains(plan.Category))
            {
                _categories.Add(plan.Category);
            }
        }
        _activeTabIndex = 0;
        FilterDeployments(0);
    }

    private int _activeTabIndex = 0;

    private string[]? _regions = null;
    private string? _region = null;

    private void OnRegionChanged(string? region)
    {
        _region = region;

        FilterDeployments(_activeTabIndex);
        /*
        var category = _categories[_activeTabIndex];

        _filteredPlans.Clear();
        if (_region is null)
        {
            _filteredPlans.AddRange(_plans.Where(x => x.Category == category));
        }
        else
        {
            _filteredPlans.AddRange(_plans.Where(x => x.Category == category && x.Region == _region));
        }*/
    }

    private string? _searchString;

    private Task OnSearch(string text)
    {
        _searchString = text;
        FilterDeployments(_activeTabIndex);
        return Task.CompletedTask;
    }


    private void FilterDeployments(int index)
    {
        _activeTabIndex = index;
        _filteredPlans.Clear();
        if (index >= 0 && index < _categories.Count)
        {
            var category = _categories[index];

            var plans = _plans.Where(x => x.Category == category);
            if (!string.IsNullOrEmpty(_searchString))
            {
                plans = plans.Where(x => x.Name.Contains(_searchString, StringComparison.InvariantCultureIgnoreCase));
            }
            if (!string.IsNullOrEmpty(_region))
            {
                plans = plans.Where(x => x.Region == _region);
            }
            _filteredPlans.AddRange(plans);
        }
        InvokeAsync(() =>
        {
            this.StateHasChanged();
        });
    }
}