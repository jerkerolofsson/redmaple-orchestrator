@page "/deployments/{slug}/edit"
@implements IDisposable
@rendermode InteractiveServer
@using RedMaple.Orchestrator.Controller.Domain.Aggregations
@using RedMaple.Orchestrator.Controller.Domain.Deployments
@using RedMaple.Orchestrator.Controller.Domain.Metrics.ContainerMetrics
@using RedMaple.Orchestrator.Controller.Domain.Metrics.Models
@using RedMaple.Orchestrator.Controller.ViewModels
@using System.Globalization
@inject IDeploymentManager deploymentManager
@inject INodeManager nodeManager
@inject NavigationManager navigationManager
@inject ISnackbar Snackbar

<MudSnackbarProvider />
<MudPopoverProvider />

<MudText Typo="Typo.h3">Edit @Slug</MudText>

@if(_plan is not null)
{
    <EditForm Model="@_plan" OnValidSubmit="async () => await OnValidSubmitAsync()">
        <DataAnnotationsValidator />

        <MudCard Class="pa-5 mt-5">
            <MudCardContent>
                <MudStack Spacing="3">
                    <MudStack Spacing="0">
                        <MudText>Deployment Name</MudText>
                        <MudTextField @bind-Value="_plan.Name" />
                    </MudStack>

                    <MudStack Spacing="0">
                        <MudText>Ingress Node</MudText>
                        <SelectNode MustBeIngress="true" Value="@_ingressNode" ValueChanged="OnIngressNodeChanged" Label="" />
                    </MudStack>

                    <MudStack Spacing="0">
                        <MudText>Application Node</MudText>
                        <SelectNode MustBeApplicationHost="true" Value="@_applicationNode" ValueChanged="OnApplicationNodeChanged" Label="" />
                    </MudStack>

                    <MudStack Spacing="0">
                        <MudText>Region</MudText>
                        <MudTextField @bind-Value="_plan.Region" />
                    </MudStack>

                    <MudStack  Spacing="0">
                        <MudText>Category</MudText>
                        <MudTextField @bind-Value="_plan.Category" />
                    </MudStack>


                    <MudStack  Spacing="0">
                        <MudText>Icon</MudText>
                        <MudTextField @bind-Value="_plan.IconUrl" />
                    </MudStack>

                    <MudText Class="mt-5" Typo="Typo.h6">Docker Compose</MudText>
                    <DockerComposeEditor @bind-Value="_plan.Plan" />

                    <MudText Class="mt-5" Typo="Typo.h6">Environment Variables</MudText>
                    <EnvironmentVariableEditor EnvironmentVariables="@_plan.EnvironmentVariables" />

                </MudStack>
            </MudCardContent>
            <MudCardActions>
                <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit" Variant="Variant.Filled">Save</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
}


@code {
    [Parameter]
    public string Slug { get; set; } = null!;

    private DeploymentPlan? _plan = null;
    private NodeInfo? _ingressNode = null;
    private NodeInfo? _applicationNode = null;

    private void OnApplicationNodeChanged(NodeInfo node)
    {
        _applicationNode = node;
        if (_plan is not null)
        {
            _plan.ApplicationServerIps = [node.IpAddress];
        }
    }
    private void OnIngressNodeChanged(NodeInfo node)
    {
        _ingressNode = node;
        if (_plan is not null)
        {
            _plan.IngressServerIp = node.IpAddress;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _plan = await deploymentManager.GetDeploymentBySlugAsync(Slug);
        if(_plan is null)
        {
            navigationManager.NavigateTo("/deployments");
        }
        else 
        {
            if (_plan.ApplicationServerIps.Count > 0)
            {
                _applicationNode = await nodeManager.GetNodeByIpAddressAsync(_plan.ApplicationServerIps[0]);
            }
            if (!string.IsNullOrEmpty(_plan.IngressServerIp))
            {
                _ingressNode = await nodeManager.GetNodeByIpAddressAsync(_plan.IngressServerIp);
            }
        }
    }


    private async Task OnValidSubmitAsync()
    {
        if (_plan is not null)
        {
            var res = await deploymentManager.ValidatePlanAsync(_plan, false);
            if (res.Errors.Count == 0)
            {
                await deploymentManager.SaveAsync(_plan);
                navigationManager.NavigateTo("/deployments");
            }
            else
            {
                Snackbar.Add(res.Errors[0].ErrorMessage, Severity.Error);
            }
        }
    }

    public void Dispose()
    {
    }
}
