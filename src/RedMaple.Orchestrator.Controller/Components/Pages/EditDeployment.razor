@page "/deployments/{slug}/edit"
@implements IDisposable
@rendermode InteractiveServer
@using RedMaple.Orchestrator.Controller.Domain.Aggregations
@using RedMaple.Orchestrator.Controller.Domain.Deployments
@using RedMaple.Orchestrator.Controller.Domain.Metrics.ContainerMetrics
@using RedMaple.Orchestrator.Controller.Domain.Metrics.Models
@using RedMaple.Orchestrator.Controller.ViewModels
@using System.Globalization
@inject IClusterResourceManager clusterResourceManager
@inject IDeploymentManager deploymentManager
@inject INodeManager nodeManager
@inject NavigationManager navigationManager
@inject ISnackbar Snackbar
@inject IDialogService dialogService

<MudThemeProvider IsDarkMode="true" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@if(_plan is not null)
{
    <MudBreadcrumbs Items="_nav"></MudBreadcrumbs>

    <MudItem Style="max-width: 1200px">
        <EditForm Model="@_plan" OnValidSubmit="async () => await OnValidSubmitAsync()">
            <DataAnnotationsValidator />
            <MudStack Spacing="5">
                <MudPaper Class="pa-3">
                    <MudStack Spacing="3">
                        <MudStack Spacing="0">
                            <MudText Typo="Typo.h6" Color="Color.Secondary">Deployment</MudText>
                            <MudText Typo="Typo.subtitle2">Changes to the deployment properties will take effect when the deployment is restarted</MudText>
                        </MudStack>

                        <Setting Title="Name"><MudTextField @bind-Value="_plan.Name" /></Setting>
                        <Setting Title="Category"><MudTextField @bind-Value="_plan.Category" /></Setting>
                        <Setting Title="Icon"><MudTextField @bind-Value="_plan.IconUrl" /></Setting>

                        <Setting Title="Application Server">
                            <SelectNode MustBeApplicationHost="true" Value="@_applicationNode" ValueChanged="OnApplicationNodeChanged" Label="" />
                        </Setting>
                        <Setting Title="Region"><SelectRegion Region="@_plan.Region" RegionChanged="OnRegionChangedAsync" /></Setting>
                    </MudStack>
                </MudPaper>

                @if(_plan.ReverseProxy is not null && _plan.CreateIngress)
                {
                    <MudPaper Class="pa-3">
                        <MudStack Spacing="3">
                            <MudText Typo="Typo.h6" Color="Color.Secondary">Ingress</MudText>

                            <Setting Title="Server">
                                <SelectNode MustBeIngress="true" Value="@_ingressNode" ValueChanged="OnIngressNodeChanged" Label="" />
                            </Setting>

                            <Setting Title="HTTP2">
                                <MudSwitchM3 Color="Color.Primary" @bind-Value="_plan.ReverseProxy.EnableHttp2" />
                            </Setting>
                            <Setting Title="Proxy Buffering">
                                <MudSwitchM3 Color="Color.Primary" @bind-Value="_plan.ReverseProxy.Buffering" />
                            </Setting>
                        </MudStack>
                    </MudPaper>
                }

                <MudPaper Class="pa-3">
                    <MudStack Spacing="3">
                        <MudText Typo="Typo.h6" Color="Color.Secondary">Health Checks</MudText>
                        <HealthChecksEditor @bind-Checks="@_plan.HealthChecks"/>
                    </MudStack>
                </MudPaper>

                <MudPaper Class="pa-3">
                    <MudStack Spacing="3">
                        <MudText Typo="Typo.h6" Color="Color.Secondary">Resource</MudText>

                        <Setting Title="Create Resource" SubTitle="If enabled a resource will be created">
                            <MudSwitchM3 Color="Color.Secondary" @bind-Value="_plan.Resource.Create" />
                        </Setting>

                        @if (_plan.Resource.Create)
                        {
                            <Setting Title="Service Name">
                                <MudTextField @bind-Value="_plan.Resource.ServiceName" />
                            </Setting>

                            <Setting Title="Kind">
                                <MudSelectExtended @bind-Value="_plan.Resource.Kind" T="ResourceKind?" ItemCollection="@_resourceKinds"></MudSelectExtended>
                            </Setting>
                            <Setting Title="Connection String Format">
                                <MudTextField @bind-Value="_plan.Resource.ConnectionStringFormat" />
                            </Setting>
                            <Setting Title="Connection String Variable Name Format">
                                <MudTextField @bind-Value="_plan.Resource.ConnectionStringVariableNameFormat" />
                            </Setting>
                        }
                    </MudStack>
                </MudPaper>

                <MudPaper Class="pa-3">
                    <MudStack Spacing="3">
                        <MudText Typo="Typo.h6" Color="Color.Secondary">Docker Compose</MudText>
                        <DockerComposeEditor @bind-Value="_plan.Plan" />
                    </MudStack>
                </MudPaper>

                <MudPaper Class="pa-3">
                    <MudStack Spacing="3">
                        <MudText Typo="Typo.h6" Color="Color.Secondary">Environment Variables</MudText>
                        <EnvironmentVariableEditor EnvironmentVariables="@_plan.EnvironmentVariables" />

                    </MudStack>
                </MudPaper>
                <MudStack Row="true">
                    <MudButton Color="Color.Primary" ButtonType="ButtonType.Submit" Variant="Variant.Filled">Save</MudButton>
                </MudStack>
            </MudStack>
        </EditForm>
    </MudItem>
}

@code {
    [Parameter]
    public string Slug { get; set; } = null!;

    private DeploymentPlan? _plan = null;
    private NodeInfo? _ingressNode = null;
    private NodeInfo? _applicationNode = null;
    private ResourceKind?[] _resourceKinds =
    [
    ResourceKind.API,
    ResourceKind.ConnectionString,
    ResourceKind.ApplicationService,
    ResourceKind.MessageBroker,
    ResourceKind.OidcServer,
    ResourceKind.OtlpServer,
    ];

    private async Task OnRegionChangedAsync(string? region)
    {
        if(_plan is null)
        {
            return;

        }
        _plan.Region = region;

        string regionName = region ?? "global";

        bool? result = await dialogService.ShowMessageBox(
          "Confirm",
          $"Would you like to update variables from resources in the {region} region?",
          yesText: "Yeah", cancelText: "Cancel");
        if (result == true)
        {
            var resources = await clusterResourceManager.GetClusterResourcesAsync(_plan.EnvironmentVariables, region);
            foreach(var resource in resources)
            {
                foreach (var envVar in resource.EnvironmentVariables)
                {
                    if(_plan.EnvironmentVariables.ContainsKey(envVar.Key) &&  _plan.EnvironmentVariables[envVar.Key] != envVar.Value)
                    {
                        Snackbar.Add($"Changed {envVar.Key} from {_plan.EnvironmentVariables[envVar.Key]} to {envVar.Value}");
                        _plan.EnvironmentVariables[envVar.Key] = envVar.Value;
                    }
                }
            }
        }
    }

    private void OnApplicationNodeChanged(NodeInfo node)
    {
        _applicationNode = node;
        if (_plan is not null)
        {
            _plan.ApplicationServerIps = [node.IpAddress];
        }
    }
    private void OnIngressNodeChanged(NodeInfo node)
    {
        _ingressNode = node;
        if (_plan is not null)
        {
            _plan.IngressServerIp = node.IpAddress;
        }
    }

    private List<BreadcrumbItem> _nav = new List<BreadcrumbItem>();

    protected override async Task OnParametersSetAsync()
    {
        _plan = await deploymentManager.GetDeploymentBySlugAsync(Slug);
        if(_plan is null)
        {
            navigationManager.NavigateTo("/deployments");
        }
        else 
        {
            _plan.ReverseProxy ??= new();

            if (_plan.ApplicationServerIps.Count > 0)
            {
                _applicationNode = await nodeManager.GetNodeByIpAddressAsync(_plan.ApplicationServerIps[0]);
            }
            if (!string.IsNullOrEmpty(_plan.IngressServerIp))
            {
                _ingressNode = await nodeManager.GetNodeByIpAddressAsync(_plan.IngressServerIp);
            }

            // Breadcrumbs
            _nav.Clear();
            _nav.Add(new("Home", "/"));
            _nav.Add(new("Deployments", "/deployments"));
            _nav.Add(new(_plan.Name, $"/deployments/{_plan.Slug}/edit"));
        }
    }


    private async Task OnValidSubmitAsync()
    {
        if (_plan is not null)
        {
            var res = await deploymentManager.ValidatePlanAsync(_plan, false);
            if (res.Errors.Count == 0)
            {
                await deploymentManager.SaveAsync(_plan);
                navigationManager.NavigateTo("/deployments");
            }
            else
            {
                Snackbar.Add(res.Errors[0].ErrorMessage, Severity.Error);
            }
        }
    }

    public void Dispose()
    {
    }
}
