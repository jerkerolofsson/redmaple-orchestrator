@page "/node/{id}/containers"
@rendermode InteractiveServer
@inject INodeManager nodeManager
@inject NavigationManager navigationManager
<MudPopoverProvider />

<div class="buttons">
    <MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               @onclick="OnCreateContainer">Create Container</MudButton>
</div>

<MudPaper Class="pa-5">

    <h1>Containers</h1>

    <MudDataGrid Bordered="true" Dense="true"
                 ReadOnly="false"
                 Items="@_containers"
                 SortMode="SortMode.Multiple">
        <Columns>
            <PropertyColumn Property="x => x.Name" Title="Name" />
            <PropertyColumn Property="x => x.Status" Title="Status" />
            <PropertyColumn Property="x => x.State" Title="State" />

            <TemplateColumn StickyRight="true">
                <CellTemplate>
                    <MudButton OnClick="async() => await StartContainerAsync(context.Item.Id)">Start</MudButton>
                    <MudButton OnClick="async() => await StopContainerAsync(context.Item.Id)">Stop</MudButton>
                    <MudButton OnClick="async() => await RestartContainerAsync(context.Item.Id)">Restart</MudButton>
                </CellTemplate>
            </TemplateColumn>

        </Columns>
    </MudDataGrid>
</MudPaper>

@code {
    [Parameter] public string Id { get; set; } = null!;

    private NodeInfo? _nodeInfo;
    private List<Container> _containers = new();
    private void OnCreateContainer()
    {
        navigationManager.NavigateTo($"/node/{Id}/create-simple-container");
    }
    private async Task StartContainerAsync(string id)
    {
        if (_nodeInfo is not null)
        {
            using var client = new NodeContainersClient(_nodeInfo.BaseUrl);
            await client.StartAsync(id);
        }
    }
    private async Task StopContainerAsync(string id)
    {
        if (_nodeInfo is not null)
        {
            using var client = new NodeContainersClient(_nodeInfo.BaseUrl);
            await client.StopAsync(id);
        }
    }
    private async Task RestartContainerAsync(string id)
    {
        if (_nodeInfo is not null)
        {
            using var client = new NodeContainersClient(_nodeInfo.BaseUrl);
            await client.RestartAsync(id);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var nodes = await nodeManager.GetNodesAsync();
        _nodeInfo = nodes.FirstOrDefault(x => x.Id == Id);
 
        if (_nodeInfo is not null)
        {
            using var client = new NodeContainersClient(_nodeInfo.BaseUrl);
            _containers = await client.GetContainersAsync();
        }
    }
}