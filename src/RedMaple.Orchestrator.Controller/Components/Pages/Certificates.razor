@page "/certificates"
@using MudBlazor
@using RedMaple.Orchestrator.Controller.Domain.Domain
@using RedMaple.Orchestrator.Security
@using RedMaple.Orchestrator.Security.Models
@using RedMaple.Orchestrator.Security.Services
@using System.Security.Cryptography.X509Certificates
@rendermode InteractiveServer
@inject ICertificateAuthority certificateAuthority
@inject IDomainService domain
@inject NavigationManager navigationManager
<MudPopoverProvider />

<h1>Certificates</h1>
<h2 class="mt-5">Root Certificate</h2>
<MudPaper Class="pa-5">
    <a href="/api/ca/root/cert"><img src="certificate.png" alt="certificate"/> Download Root-CA certificate (.crt)</a>
    <a href="/api/ca/root/pem"><img src="certificate.png" alt="certificate" /> Download Root-CA certificate (.pem)</a>
</MudPaper>

<h2 class="mt-5">Intermediate CA Certificate</h2>
<MudPaper Class="pa-5">
    <a href="/api/ca/intermediate/cert"><img src="certificate.png" alt="certificate" /> Download Intermidate-CA certificate (.crt)</a>
    <a href="/api/ca/intermediate/pem"><img src="certificate.png" alt="certificate" /> Download Intermidate-CA certificate (.pem)</a>
</MudPaper>

<h3 class="mt-5">Replace root certificate</h3>
<MudPaper Class="pa-5">
    <code>
        <pre>curl -X POST --data-binary @@root_ca.pfx -H "Content-Type: application/octet-stream" https://URL/api/ca/root?password=PASSWORD</pre>
    </code>
</MudPaper>

<h3 class="mt-5">Generate certificate</h3>
<EditForm Model="@model">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Label="Domain Name"
                                  @bind-Value="model.DnsName" For="@(() => model.DnsName)" />

                    <MudTextField Label="Password" Class="mt-5"
                                  @bind-Value="model.Password" For="@(() => model.Password)" />

                    <MudTextField Label="IP Address" Class="mt-5"
                                  HelperText="Optional"
                                  @bind-Value="model.IpAddress" For="@(() => model.IpAddress)" />

                </MudCardContent>
                <MudCardActions>
                    <MudStack Row="true" Spacing="3">
                        <MudButton OnClick="() => GenerateZip()"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary">Generate Certificate</MudButton>

                        <MudButton OnClick="() => GeneratePfx()"
                                   Variant="Variant.Outlined"
                                   Color="Color.Primary">Generate PFX</MudButton>
                    </MudStack>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private X509Certificate? rootCert;
    private X509Certificate? caCert;

    GenerateCertificateModel model = new GenerateCertificateModel();

    public class GenerateCertificateModel
    {
        [Required]
        public string DnsName { get; set; } = "";

        public string Password { get; set; } = "hunter2";
        public string IpAddress { get; set; } = "";
    }

    public void GenerateZip()
    {
        navigationManager.NavigateTo($"/api/ca/generate?cn={model.DnsName}&dnsName={model.DnsName}&ipAddress={model.IpAddress}&password={model.Password}&format=zip");
    }

    public void GeneratePfx()
    {
        navigationManager.NavigateTo($"/api/ca/generate?cn={model.DnsName}&dnsName={model.DnsName}&ipAddress={model.IpAddress}&password={model.Password}&format=pfx");
    }


    protected override async Task OnInitializedAsync()
    {
        rootCert = await certificateAuthority.GetRootCertificateAsync();
        caCert = await certificateAuthority.GetCaCertificateAsync();

        model.DnsName = "app1." + domain.DefaultDomain;
    }
}