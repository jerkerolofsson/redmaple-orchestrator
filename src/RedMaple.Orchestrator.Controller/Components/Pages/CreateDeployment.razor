@page "/create-deployment"
@rendermode InteractiveServer
@using RedMaple.Orchestrator.Contracts.Deployments
@using RedMaple.Orchestrator.Contracts.Healthz
@using RedMaple.Orchestrator.Controller.Components.Views
@using RedMaple.Orchestrator.Controller.Domain.Deployments
@using RedMaple.Orchestrator.Controller.Domain.Deployments.Templates
@using RedMaple.Orchestrator.Controller.Domain.Domain
@inject IDeploymentTemplateProvider _templateProvider
@inject INodeManager _nodeManager
@inject IDomainService domain
@inject IDeploymentManager deploymentManager
@inject IClusterResourceManager clusterResourceManager
@inject NavigationManager navigationManager

<MudPopoverProvider />

<EditForm Model="@model" OnValidSubmit="async () => await OnValidSubmitAsync()">
    <DataAnnotationsValidator />
    <MudItem >
        <MudText Typo="Typo.h5">Create deployment</MudText>

        <MudStack Row="true">
            @if (_wizardPage != Pages.SelectTemplate)
            {
                <MudButton OnClick="PrevPage"
                           ButtonType="ButtonType.Submit"
                           Variant="Variant.Outlined"
                           Color="Color.Primary">Back</MudButton>
            }

            @if (_wizardPage != Pages.ValidateAndConfirm)
            {
                <MudButton Class="ml-auto"
                           OnClick="async ()  => await NextPageAsync()"
                           ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary">Next</MudButton>
            }
        </MudStack>


        @if (_wizardPage == Pages.SelectTemplate)
        {
            <MudText Typo="Typo.h6">Select template</MudText>

            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                @foreach (var category in _categories)
                {
                    <MudTabPanel Text="@category">
                        <div class="templates mt-5">
                            @foreach (var template in _templates.Where(x => x.Category == category))
                            {
                                <MudPaper Class="pa-4 hover-elevation" @onclick="async () => await ApplyTemplateAsync(template)">
                                    <div class="template">
                                        <img src="@template.IconUrl" />
                                        <div>@template.Name</div>
                                    </div>
                                </MudPaper>
                            }
                        </div>
                    </MudTabPanel>
                }
            </MudTabs>
        } 
        else if (_wizardPage == Pages.SelectDomainName)
        {
            <MudCard Class="pa-5 mt-5">
                <MudCardContent>
                    <MudText Typo="Typo.h6">Define deployment</MudText>

                    <MudTextField Label="Deployment Name" Class="mt-5"
                                    @bind-Value="model.Name" For="@(() => model.Name)" />

                    <MudTextField Label="Domain Name" Class="mt-5"
                                    @bind-Value="model.DomainName" For="@(() => model.DomainName)" />
                </MudCardContent>
            </MudCard>
        }
        else if (_wizardPage == Pages.EditComposePlan)
        {
            <MudCard Class="pa-5 mt-5">
                <MudCardContent>
                    <MudText Typo="Typo.h6">@model.Kind</MudText>
                    <MudItem Style="border: solid 1px #ccc; background: #444"  Class="mt-5 pa-5">
                    <YamlTextField 
                                    Style="font-family: monspace; background: #444; color: white;"
                                    Lines="20"
                                    @bind-Value="model.Plan"/>
                    </MudItem>
                </MudCardContent>
            </MudCard>
        }
        else if (_wizardPage == Pages.ConfigureServers)
        {
            <MudCard Class="pa-5 mt-5">
                <MudCardContent>
                    <MudText Typo="Typo.h6">Ingress Server</MudText>
                    <MudText Typo="Typo.subtitle1">Reverse proxy will be created here</MudText>

                    <MudSwitch Color="Color.Primary" Class="mt-5" @bind-Value="model.CreateIngress">Create Ingress</MudSwitch>

                    @if (model.CreateIngress)
                    {
                        <MudItem xs="12" sm="6" md="4">
                            <SelectNode MustBeIngress="true" @bind-Value="model.IngressNode" Label="Ingress Server" />
                        </MudItem>
                    }

                </MudCardContent>
            </MudCard>

            <MudCard Class="pa-5 mt-5">
                <MudCardContent>
                    <MudText Typo="Typo.h6">Application Server</MudText>
                    <MudText Typo="Typo.subtitle1">Containers will be deployed here</MudText>
                    <MudItem xs="12" sm="6" md="4" Class="mt-5">
                        <SelectNode MustBeApplicationHost="true" @bind-Value="model.ApplicationNode" Label="Application Server" />
                    </MudItem>
                </MudCardContent>
            </MudCard>
        }
        else if (_wizardPage == Pages.ConfigureResources)
        {
            <MudCard Class="pa-5 mt-5">
                <MudCardContent>

                    <MudText Typo="Typo.h6">Dependencies</MudText>
                    <DependencyEditor @bind-Dependencies="@model.Resources"
                                      EnvironmentVariables="@model.EnvironmentVariables" />

                    <MudText Typo="Typo.h6" Class="mt-5">Volumes</MudText>
                    <VolumesEditor @bind-VolumeBinds="@model.VolumeBinds" />

                </MudCardContent>
            </MudCard>
        }
        else if (_wizardPage == Pages.ConfigureEnvironmentVariables)
        {
            <MudCard Class="pa-5 mt-5">
                <MudCardContent>
                    <MudText Typo="Typo.h6">Environment Variables</MudText>
                    <EnvironmentVariableEditor EnvironmentVariables="@model.EnvironmentVariables" />
                </MudCardContent>
            </MudCard>
        }
        else if (_wizardPage == Pages.ValidateAndConfirm)
        {
            <MudCard Class="pa-5 mt-5">
                <MudCardContent>
            @if(!_validationResult.IsValid)
            {
                <MudStack Spacing="2">
                @foreach(var error in _validationResult.Errors)
                {
                    if(error.Severity == FluentValidation.Severity.Error)
                    {
                        <MudAlert Severity="Severity.Error">@error.ErrorMessage</MudAlert>
                    }
                    else if(error.Severity == FluentValidation.Severity.Warning)
                    {
                        <MudAlert Severity="Severity.Warning">@error.ErrorMessage</MudAlert>
                    }
                    else
                    {
                        <MudAlert Severity="Severity.Info">@error.ErrorMessage</MudAlert>
                    }
                }
                </MudStack>
            }
            else
            {
                <MudText Typo="Typo.h6">Ready for deployment</MudText>
                <MudButton  Class="ml-auto"
                            OnClick="CreateDeploymentAsync"
                            ButtonType="ButtonType.Submit"
                            Variant="Variant.Filled"
                            Color="Color.Primary">Create</MudButton>

                <MudItem Class="ml-5 mt-5">
                <ol>
                    @if(model.CreateIngress)
                    {
                        <li>Create DNS entry @model.DomainName for Ingress</li>
                        <li>Create ingress service @model.DomainName at @model.IngressNode?.IpAddress</li>
                        <li>Generate HTTPS certificates for SAN: @model.DomainName</li>
                        <li>Generate HTTPS certificates for SAN: @model.ApplicationNode?.IpAddress</li>
                    }
                    else
                    {
                        <li>Create DNS entry @model.DomainName for application</li>
                        <li>Generate HTTPS certificates for SAN: @model.ApplicationNode?.IpAddress</li>
                    }

                    @if(_workPlan is not null)
                    {
                        foreach(var container in _workPlan.ContainerImages)
                        {
                            <li>Create container '@container' at @model.ApplicationNode?.IpAddress</li>
                        }
                    }
                </ol>
                </MudItem>
            }
                </MudCardContent>
            </MudCard>
        }
    </MudItem>
</EditForm>


@code {
    private CreateDeploymentModel model = new()
        {
            Resources = new()
        };
    private List<DeploymentPlanTemplate> _templates = new();
    private List<string> _categories = new();
    private Pages _wizardPage = Pages.SelectTemplate;

    public enum Pages
    {
        SelectTemplate = 0,
        EditComposePlan = 1,
        SelectDomainName = 2,
        ConfigureServers = 3,
        ConfigureResources = 4,
        ConfigureEnvironmentVariables = 5,
        ValidateAndConfirm = 6
    }

    public class CreateDeploymentModel
    {
        [Required]
        public string Name { get; set; } = "";

        [Required]
        public string DomainName { get; set; } = "";

        public List<VolumeBind> VolumeBinds { get; set; } = new();

        /// <summary>
        /// Options related to the resource entity created from a deployment
        /// </summary>
        public ResourceCreationOptions Resource { get; set; } = new ResourceCreationOptions();

        public string? Description {get;set;}
        public string? Category { get; set; }

        ///<summary>
        /// Type of deployment
        /// </summary>
        public DeploymentKind Kind { get; set; } = DeploymentKind.DockerCompose;

        /// <summary>
        /// Assigned resources 
        /// </summary>
        public List<ClusterResource>? Resources { get; set; }

        [Required]
        public string? Plan { get; set; }

        /// <summary>
        /// All environment variables
        /// </summary>
        public Dictionary<string, string>? EnvironmentVariables = null;

        /// <summary>
        /// Key is the environment variable which is assigned from the resource, value is the resource Id
        /// </summary>
        public Dictionary<string,string> ResourceVariableMap = new();

        public bool CreateIngress { get; set; }

        public NodeInfo? IngressNode { get; set; }

        public int ApplicationPort { get; set; } = Random.Shared.Next(10000, 20000);
        public string ApplicationProtocol { get; set; } = "https";

        public string? IconUrl{ get; set; }

        [Required]
        public NodeInfo? ApplicationNode { get; set; }

        /// <summary>
        /// Health check tests
        /// </summary>
        public List<DeploymentHealthCheck> HealthChecks { get; set; } = new();
    }

    [Parameter] public string Id { get; set; } = null!;

    private void PrevPage()
    {
        int pageNum = (int)_wizardPage;
        if (pageNum > 0)
        {
            pageNum--;
        }
        _wizardPage = (Pages)pageNum;
    }

    private DeploymentPlan? _workPlan = null;
    private FluentValidation.Results.ValidationResult _validationResult = new FluentValidation.Results.ValidationResult();

    private async Task OnLeavingPageAsync(Pages page)
    {
        this._workPlan = CreatePlan();

        _validationResult = await deploymentManager.ValidatePlanAsync(this._workPlan);
    }

    private DeploymentPlan CreatePlan()
    {
        model.EnvironmentVariables ??= new();

        var plan = new DeploymentPlan
            {
                Id = "0",
                Name = model.Name,
                Slug = deploymentManager.CreateSlug(model.Name),
                IconUrl = model.IconUrl,
                Plan = model.Plan ?? "",
                DomainName = model.DomainName,
                Kind = model.Kind,
                CreateIngress = model.CreateIngress,
                CreateDnsEntry = true,
                IngressServerIp = model.IngressNode?.IpAddress,
                ApplicationServerIps = [model.ApplicationNode?.IpAddress],
                ApplicationServerPort = model.ApplicationPort,
                ApplicationProtocol = model.ApplicationProtocol,
                EnvironmentVariables = model.EnvironmentVariables,
                HealthChecks = model.HealthChecks,
                Resource = model.Resource,
                Category = model.Category ?? "Apps",
                VolumeBinds = model.VolumeBinds,
            };

        // Missing volumes
        foreach(var volumeBind in deploymentManager.GetMissingVolumeNames(plan))
        {
            if(!model.VolumeBinds.Where(x => x.Name == volumeBind.Name).Any())
            {
                model.VolumeBinds.Add(volumeBind);
            }
        }

        // Add defaults (like domain name)
        foreach(var pair in deploymentManager.GetDefaultEnvironmentVariables(plan))
        {
            if (!model.EnvironmentVariables.ContainsKey(pair.Key) || !string.IsNullOrEmpty(pair.Value))
            {
                model.EnvironmentVariables[pair.Key] = pair.Value;
            }
        }


        // Assign values from dependent resources here
        if (model.Resources is not null)
        {
            // Remove all old assignments (if a dependency is removed)
            foreach(var key in model.ResourceVariableMap.Keys.ToList())
            {
                model.ResourceVariableMap.Remove(key);
                model.EnvironmentVariables.Remove(key);
            }

            foreach (var resource in model.Resources)
            {
                foreach (var environmentVariable in resource.EnvironmentVariables)
                {
                    if (!model.EnvironmentVariables.TryGetValue(environmentVariable.Key, out var val) || string.IsNullOrEmpty(val))
                    {
                        model.EnvironmentVariables[environmentVariable.Key] = environmentVariable.Value;
                        model.ResourceVariableMap[environmentVariable.Key] = resource.Id;
                    }
                }
            }
        }

        // Make sure that the required envionrment variables are set
        /*
        foreach (string name in model.RequiredEnvironmentVariables)
            {
            if (!model.EnvironmentVariables.ContainsKey(name))
                {
                model.EnvironmentVariables[name] = "";
        }
        }*/
        plan.EnvironmentVariables = model.EnvironmentVariables;

        return plan;
    }

    private async Task NextPageAsync()
    {
        await OnLeavingPageAsync(_wizardPage);

        int pageNum = (int)_wizardPage;
        pageNum++;
        _wizardPage = (Pages)pageNum;

        if(_wizardPage == Pages.ConfigureEnvironmentVariables && _workPlan is not null)
        {
        }
        this.StateHasChanged();
    }

    private async Task CreateDeploymentAsync()
    {
        if(_workPlan is null)
        {
            return;
        }

        var existing = await deploymentManager.GetDeploymentBySlugAsync(_workPlan.Slug);
        if(existing is not null)
        {
            // Todo: show some error
            return;
        }

        await deploymentManager.SaveAsync(_workPlan);

        navigationManager.NavigateTo("/deployments");
    }

    private async Task ApplyTemplateAsync(DeploymentPlanTemplate template)
    {
        model.Plan = template.Plan;
        model.Resource = template.Resource;
        model.Description = template.Description;
        model.Category = template.Category;
        model.DomainName = template.Name.ToLower().Replace(' ', '-') + "." + domain.DefaultDomain;
        if(!string.IsNullOrEmpty(template.DomainNamePrefix))
        {
            model.DomainName = template.DomainNamePrefix.ToLower().Replace(' ', '-').TrimEnd('.') + "." + domain.DefaultDomain;
        }

        model.Name = template.Name;
        model.CreateIngress = template.CreateIngress;
        model.IconUrl = template.IconUrl;
        model.ApplicationProtocol = template.ApplicationProtocol;
        model.HealthChecks = template.HealthChecks;
        model.Resources = new();
        model.EnvironmentVariables = new();

        await NextPageAsync();

        // Auto assign resources to the deployment based on missing environment variables
        model.Resources = await clusterResourceManager.GetClusterResourcesAsync(model.EnvironmentVariables);

        _workPlan = CreatePlan();
    }

    protected override async Task OnInitializedAsync()
    {
        _templates.Clear();
        _categories.Clear();
        _categories.Add("Apps");
        _categories.Add("Services");
        _categories.Add("Development");
        _categories.Add("Test");
        foreach (var template in await _templateProvider.GetTemplatesAsync())
        {
            _templates.Add(template);
            template.Category ??= "Apps";
            if(!_categories.Contains(template.Category))
            {
                _categories.Add(template.Category);
            }
        }
    }

    private async Task OnValidSubmitAsync()
    {
        await Task.Delay(1000);
    }

}
